
{ 0x._ space } : 0x.

$3 parse-int =: subwallet-id

$6 "wallet-query" replace-if-null =: savefile


nft-body <s dup sbits 8 / B@ constant nft-data


// { -rot pair swap ! } : 2!

// internal_transfer


5 square .

{ char " word 1 { swap { abort } if drop } } ::_ abort"

{ null swap ! } : null!

"Color.fif" include

{ 1 'nop does create } : constant

."Transferring " amount .GR+cc ."to account "

// { true (atom) drop } : atom

{ 10 base ! } : decimal


{ show-options-help 1 halt } : usage

20000000 constant forward_amount

receiver_address

{ <b swap s, b> } : s>c

c7 // add c7 cell

// { 0 [] } : first

^reset ."👿 NFT index: " ^green index (dump) type cr

$>smca 0= abort"Specify valid send addr"

exp PROCREF:<{
//  x
DUP	//  x x
-1 GTINT	//  x _2
IF:<{	//  x
    POW2	//  _3
}>ELSE<{	//  x
    1 PUSHINT	//  x _6=1
    SWAP	//  _6=1 x
    NEGATE	//  _6=1 _8
    RSHIFT	//  _3
}>
}>


boc>B Bx.


nft-body <s dup sbits 8 / B@ constant nft-data


// { cdr cdr } : cddr


swap // get seqno as int on top of stack
(dump) // dump to string
type // print it to output
cr // print endline


"TonUtil.fif" include

5 square .

$>smca 0= abort"Specify valid send addr"


{ show-options-help 1 halt } : usage

{ extra-currencies @ cc+ extra-currencies ! } : extra-cc+!

{ swap 10 /mod char 0 + rot swap hold } : #

{ bl word 3 2 ' (create) } :: ::_

{ 2 'nop does create } : 2constant

// { swap sbitrefs -rot + rot brembitrefs -rot <= -rot <= and } : s-fits-with?

4 PUSHINT	//  x n _38=4
exp INLINECALLDICT	//  x n _39
s2 s(-1) PUXC	//  x n x _39
GEQ	//  x n _40
IF:<{	//  x n
    SWAP	//  n x
    4 RSHIFT#	//  n x
    SWAP	//  x n
    4 ADDCONST	//  x n
}>	//  x n

// { bl word dup (def?) { 2drop skip-to-eof } { swap 1 'nop does swap 0 (create) } cond } : library-version

{ 16 b# } : x#

// { swap sbitrefs -rot + rot brembitrefs -rot <= -rot <= and } : s-fits-with?

true =: allow-bounce

{ swap 10 /mod char 0 + rot swap hold } : #

{ { # over 0<= } until } : #s

<b
  op_transfer 32 u, // op transfer
  query_id 64 u, // query_id
  send_amount Gram, // Sending one jetton
  send_addr Addr,
  0 2 u, // addr_none for resp_dst
  0 1 u, // No custom payload
  forward_amount Gram, // forward ton amount 0.03
  0 1 u, // no ref forward_payload
b>

{ minmax nip } : max

"TonUtil.fif" include

<b
  0x595f07bc 32 u, // op::burn
  12345 64 u, // query_id
  5000000000 Gram, // Burning 5 jettons
  0 3 u, // addr_none for resp_dst and no custom payload
b>

// { char ) word "$" swap $+ 1 { find 0= abort"undefined parameter" execute } } ::_ $(

"EQDRebAnF1pvH1YsKNp7mtpsz+CLs6WxaffUojt1ijyrazkg" constant receiver_address

"TonUtil.fif" include

{ "" swap { 0 word 2dup $cmp } { rot swap $+ +cr swap } while 2drop } : scan-until-word

false =: force-bounce


<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>

8 PUSHINT	//  x n _31=8
exp INLINECALLDICT	//  x n _32
s2 s(-1) PUXC	//  x n x _32
GEQ	//  x n _33
IF:<{	//  x n
    SWAP	//  n x
    8 RSHIFT#	//  n x
    SWAP	//  x n
    8 ADDCONST	//  x n
}>	//  x n

<s 64 u@ // get message from second cell
swap // get seqno from cell to top
// you will see that integer and cell slice are in stack
// print seqno (it is just int in stack)

$6 "wallet-query" replace-if-null =: savefile

0xf8a7ea5 constant op_transfer


<s dup 32 u@ // get seqno from cell
swap ref@ // get ref on first cell


0b1110 b{1110} 2 exch 4 udict! drop

{ dup 10 < { 48 } { 55 } cond + } : Digit

// { 1 untuple } : unsingle


"TonUtil.fif" include

{ 16 b# } : x#

"Asm.fif" include

<s dup 32 u@ // get seqno from cell
swap ref@ // get ref on first cell


{ not 2 pick @ and xor swap ! } : ~!

{ 2 'nop does create } : 2constant

// Here goes master message

constant index

<b subwallet-id 32 u, now timeout + 32 u, seqno 32 u, send-mode 8 u, swap ref, b>


"" =: comment  // comment for simple transfers

constant index

// { dup abs <# #s rot sign #> nip } : (.)

{ bl word find not abort"-?" 0 swap } :: [compile]

{ 0X._ space } : 0X.

get_total PROC:<{
//
c4 PUSH	//  _1
CTOS	//  ds
64 LDU	//  _8 _7
DROP	//  total
}>

{ minmax nip } : max

"Hello, world!" constant hello
hello type cr


true constant bounce

{ 8 base ! } : octal

// { ._ space } : .

{ bl word 0 2 ' (create) } :: :

receiver_address

{ bl word (number) ?dup 0= abort"not a valid Gram amount"
  1- { Gram swap */r } { Gram * } cond
  1 ’nop
} ::_ GR$

// { def? ' skip-to-eof if } : skip-ifdef

{ null swap ! } : null!

{ bl word (number) ?dup 0= abort"not a valid Gram amount"
  1- { Gram swap */r } { Gram * } cond
  1 ’nop
} ::_ GR$

^reset ."😏 NFT individual content: " nft-data B>$ ^green  (dump) type cr


// { cdr cdr } : cddr

cr ."ok!" cr

1000000000 constant send_amount

// { 2 untuple } : unpair

receiver_address

// { char ) word "$" swap $+ 1 { find 0= abort"undefined parameter" execute } } ::_ $(

."seqno=0x" seqno x. ."bounce=" bounce . cr


Gram 1000 / constant mGram
mGram .

."(Saved to file " type .")" cr
"TonUtil.fif" include


{ -rot { 2 pick b# over 0<= } until rot drop } : b#s


begin-options
     " <file-path> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <file-path> "
    +"and int validator-id (workchain -1), and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-boc-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options


// Here goes master message
