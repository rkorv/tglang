
// { 1 [] } : cdr

{ { # over 0<= } until } : #s

subwallet-id (.) 1 ' $+ does : +subwallet


12345 constant query_id

4 roll // In stack: index,  collection address, owner_address, body, init?

// { dup abs <# #s rot sign #> nip } : (.)

{ 1 swap +! } : 1+!

{ bl word 1 { (def?) not } } :: undef?

' $reverse : #>

exp PROCREF:<{
//  x
DUP	//  x x
-1 GTINT	//  x _2
IF:<{	//  x
    POW2	//  _3
}>ELSE<{	//  x
    1 PUSHINT	//  x _6=1
    SWAP	//  _6=1 x
    NEGATE	//  _6=1 _8
    RSHIFT	//  _3
}>
}>

$2 bounce parse-load-address force-bounce or allow-bounce and =: bounce 2=: dest_addr

^reset ."ü§Ø NFT Body: " nft-body <s ^cyan (dump) type cr //  In stack: owner_address, collection address SLICE, body SLICE

{ extra-currencies @ cc+ extra-currencies ! } : extra-cc+!

{ dup 10 < { 48 } { 55 } cond + } : Digit

$6 "wallet-query" replace-if-null =: savefile

// { 3 tuple-len? } : triple?

"Asm.fif" include

<b
  op_transfer 32 u, // op transfer
  query_id 64 u, // query_id
  send_amount Gram, // Sending one jetton
  send_addr Addr,
  0 2 u, // addr_none for resp_dst
  0 1 u, // No custom payload
  forward_amount Gram, // forward ton amount 0.03
  0 1 u, // no ref forward_payload
b>

{ (0x.) type } : 0x._

64 PUSHINT	//  x n _10=64
exp INLINECALLDICT	//  x n _11
s2 s(-1) PUXC	//  x n x _11
GEQ	//  x n _12
IF:<{	//  x n
    SWAP	//  n x
    64 RSHIFT#	//  n x
    SWAP	//  x n
    64 ADDCONST	//  x n
}>	//  x n

constant nft-body

// create a message
<b b{01} s, bounce 1 i, b{000} s, dest_addr Addr, amount Gram+cc, 0 9 64 32 + + u,
  body-cell <s 2dup 1 s-fits-with? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b>

{ { # over 0<= } until } : #s

{ -rot { 2 pick B# over 0<= } until rot drop } : B#s

{ bl (-trailing) } : -trailing

"TonUtil.fif" include

// Here goes master message

"Asm.fif" include

variable extra-currencies

{ bl word 3 2 ' (create) } :: ::_

{ bl word 1 {
  dup find { " -?" $+ abort } ifnot nip execute
} } :: @'

// a b --
{ swap ._ ."/" . } : R.
1.7 2/3 R- R.

{ bl word 1 2 ' (create) } "::" 1 (create)

PROGRAM{ "fif/0.fif" include }END>c <s

swap 0<> abort"exit code"


0x35 runvmx // Runvm, in stack now seqno
2drop drop

// TODO:

{ 1 swap +! } : 1+!


true constant bounce

{ char " word 1 ' $+ } ::_ +"

{ 0 word -trailing scan-until-word 1 'nop } ::_ $<<

{ char } word x>B 1 'nop } ::_ B{

{ dup square square * } : **5
3 **5 .

{ bl word 1 { (def?) not } } :: undef?

2 PUSHINT	//  x n _45=2
exp INLINECALLDICT	//  x n _46
s2 s(-1) PUXC	//  x n x _46
GEQ	//  x n _47
IF:<{	//  x n
    SWAP	//  n x
    2 RSHIFT#	//  n x
    SWAP	//  x n
    2 ADDCONST	//  x n
}>	//  x n

// create a message
<b b{01} s, bounce 1 i, b{000} s, dest_addr Addr, amount Gram+cc, 0 9 64 32 + + u,
  body-cell <s 2dup 1 s-fits-with? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b>

// { 0 [] } : car

"Color.fif" include

{ tuck @ swap - swap ! } : -!

{ 2dup > ' swap if } : minmax

// { 3 tuple } : triple


.s
^reset ."üòè NFT individual content: " ref@ <s dup sbits 8 / B@ dup constant nft-data ^green  (dump) type cr

#!/usr/bin/create-state -s

<b subwallet-id 32 u, now timeout + 32 u, seqno 32 u, send-mode 8 u, swap ref, b>

variable extra-currencies

{ 1 'nop does create } : constant

{ dup square square * } : **5
3 **5 .

$4 parse-int =: seqno

{ base @ B# } : Base#

<b 0 4 u, b>

// { def? ' skip-to-eof if } : skip-ifdef


true constant bounce

0xf8a7ea5 constant op_transfer


"" constant <#

<b 0 4 u, b>


.s
^reset ."üòè NFT individual content: " ref@ <s dup sbits 8 / B@ dup constant nft-data ^green  (dump) type cr

{ bl word find not abort"-?" 0 swap } :: [compile]

{ dup =: x dup * =: y } : setxy
3 setxy x . y . x y + .
7 setxy x . y . x y + .

{ minmax drop } : min

{ bl (-trailing) } : -trailing

// a b c d -- (a*d-b*c) b*d
{ -rot over * 2swap tuck * rot - -rot * } : R-

$4 parse-int =: seqno

{ 0X._ space } : 0X.

^reset ."üëª NFT owner: "  addr@ -rot 2constant nft_owner_address nft_owner_address rot ^green  print-addr cr //  In stack: collection address SLICE, body SLICE, owner_address SLICE

{ 16 b#s } : x#s

{ <b swap s, b> } : s>c

{ base @ B#s } : Base#s

// { 0 [] } : car

1000000000 constant send_amount

10 constant ten

cr ."ok!" cr

// { 3 tuple } : triple


begin-options
     " <filename-base> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-fift-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

{ bl word 1 ' (def?) } :: def?

{ dup 0< ' negate if } : abs

$3 parse-int =: subwallet-id

// { 0 { 1+ dup 1 ' $() does over (.) "$" swap $+ 0 (create) } rot times drop } : :$1..n

{ null swap ! } : null!

{ 8 base ! } : octal

$# dup 5 < swap 7 > or ' usage if

sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	//
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	//
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>


// { 3 tuple } : triple

$5 $>cc extra-cc+! extra-currencies @ 2=: amount

{ not 2 pick @ and xor swap ! } : ~!

{ bl word 1 ' (def?) } :: def?


{ show-options-help 1 halt } : usage

<s 64 u@ // get message from second cell
swap // get seqno from cell to top
// you will see that integer and cell slice are in stack
// print seqno (it is just int in stack)

{ bl word find not abort"-?" 0 swap } :: [compile]

1 2 3 triple 4 5 6 triple 7 8 9 triple triple constant Matrix
Matrix .dump cr
| 1 "one" pair , 2 "two" pair , 3 "three" pair , .dump

// TODO:
