
subwallet-id (.) 1 ' $+ does : +subwallet


^reset ."😏 NFT collection base content: " collection-nft-data B>$ ^cyan  (dump) type cr

{ bl word 1 { -rot 2 'nop does swap 0 (create) }
} :: 2=:

{ (0X.) type } : 0X._


3 roll // In stack: collection address, owner_address, body, index

{ tuck @ + swap ! } : +!

variable base

// msg slice

64 PUSHINT	//  x n _10=64
exp INLINECALLDICT	//  x n _11
s2 s(-1) PUXC	//  x n x _11
GEQ	//  x n _12
IF:<{	//  x n
    SWAP	//  n x
    64 RSHIFT#	//  n x
    SWAP	//  x n
    64 ADDCONST	//  x n
}>	//  x n

variable base

power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	//
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	//
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>


"../build/nft_collection.fif" include constant collection-code

drop  // Drop flags


IF:<{	//  x n
    SWAP	//  n x
    16 RSHIFT#	//  n x
    SWAP	//  x n
    16 ADDCONST	//  x n
}>	//  x n


begin-options
     " <filename-base> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

<s 64 u@ // get message from second cell
swap // get seqno from cell to top
// you will see that integer and cell slice are in stack
// print seqno (it is just int in stack)

"Lists.fif" include

// { dup abs <# #s rot sign #> nip } : (.)

{ <b swap s, b> } : s>c

{ 8 base ! } : octal


boc>B Bx.

// { (.) type } : ._

// { swap sbitrefs -rot + rot brembitrefs -rot <= -rot <= and } : s-fits-with?

{ 16 b# } : x#

exp PROCREF:<{
//  x
DUP	//  x x
-1 GTINT	//  x _2
IF:<{	//  x
    POW2	//  _3
}>ELSE<{	//  x
    1 PUSHINT	//  x _6=1
    SWAP	//  _6=1 x
    NEGATE	//  _6=1 _8
    RSHIFT	//  _3
}>
}>

{ base @ B# } : Base#

64 PUSHINT	//  x n _10=64
exp INLINECALLDICT	//  x n _11
s2 s(-1) PUXC	//  x n x _11
GEQ	//  x n _12
IF:<{	//  x n
    SWAP	//  n x
    64 RSHIFT#	//  n x
    SWAP	//  x n
    64 ADDCONST	//  x n
}>	//  x n

<b
  0x595f07bc 32 u, // op::burn
  12345 64 u, // query_id
  5000000000 Gram, // Burning 5 jettons
  0 3 u, // addr_none for resp_dst and no custom payload
b>

<b subwallet-id 32 u, now timeout + 32 u, seqno 32 u, send-mode 8 u, swap ref, b>

1 2 3 triple 4 5 6 triple 7 8 9 triple triple constant Matrix
Matrix .dump cr
| 1 "one" pair , 2 "two" pair , 3 "three" pair , .dump

// current continuation slice

{ bl word 1 { find 0= abort"word not found" } } :: (')

{ bl word 1 { (def?) not } } :: undef?

{ -rot { 2 pick b# over 0<= } until rot drop } : b#s

^reset ."🐾 NFT data: "  <b collection-nft-data  B, nft-data B, b> <s dup sbits 8 / B@ B>$ ^cyan (dump) type cr



runvm


{ tuck @ swap - swap ! } : -!

// { cdr cdr } : cddr

sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	//
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	//
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>


2 PUSHINT	//  x n _45=2
exp INLINECALLDICT	//  x n _46
s2 s(-1) PUXC	//  x n x _46
GEQ	//  x n _47
IF:<{	//  x n
    SWAP	//  n x
    2 RSHIFT#	//  n x
    SWAP	//  x n
    2 ADDCONST	//  x n
}>	//  x n

dup hashu wallet_pk ed25519_sign_uint

// { bl word dup (def?) { drop skip-to-eof } { 'nop swap 0 (create) } cond } : library

"./collection-data.fif" include constant collection-data


<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>

// Here goes master message

// { 3 tuple } : triple


0x076ef1ea           // magic
0                    // actions
0                    // msgs_sent
0           // unixtime
1                    // block_lt
0       // trans_lt
239                  // randseed
1000000000 null pair // balance_remaining

drop  // Drop flags


{ find 0<> dup ' nip if } : (def?)

#!/usr/bin/fift -s

{ char " word 1 ' $+ } ::_ +"

<b 0 4 u, b>


begin-options
     " <filename-base> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-fift-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

{ over abs <# rot 1- ' x# swap times x#s rot sign #> nip } : (0x.)

{ 16 b# } : x#

"Color.fif" include

{ bl word (number) ?dup 0= abort"not a valid Gram amount"
  1- { Gram swap */r } { Gram * } cond
  1 ’nop
} ::_ GR$

get_total PROC:<{
//
c4 PUSH	//  _1
CTOS	//  ds
64 LDU	//  _8 _7
DROP	//  total
}>

// { def? ' skip-to-eof if } : skip-ifdef

"TonUtil.fif" include

<s
2 u@+ swap 0<> abort"-1"
4 u@+ swap 0 <> abort"0"
8 u@+ swap 3 <> abort"0b111"
16 u@+ swap 5 <> abort"0b01110101"
32 u@+ swap 15 <> abort"0b111111111111110001"
64 u@+ swap 27 <> abort"0b10111110000111111111111110001110101011"
128 u@+ swap 36 <> abort"0xfffaaffa3445512"
256 u@+ swap 16 <> abort"0b0111111111111011011"
s>

"Asm.fif" include

."Transferring " amount .GR+cc ."to account "

constant nft-body

c7 // add c7 cell


begin-options
     " <file-path> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <file-path> "
    +"and int validator-id (workchain -1), and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-boc-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options


{ minmax nip } : max

{ minmax drop } : min

#!/usr/bin/fift -s

<s dup 32 u@ // get seqno from cell
swap ref@ // get ref on first cell



begin-options
     " <filename-base> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-fift-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

"GetOpt.fif" include

8 PUSHINT	//  x n _31=8
exp INLINECALLDICT	//  x n _32
s2 s(-1) PUXC	//  x n x _32
GEQ	//  x n _33
IF:<{	//  x n
    SWAP	//  n x
    8 RSHIFT#	//  n x
    SWAP	//  x n
    8 ADDCONST	//  x n
}>	//  x n

60 =: timeout   // external message expires in 60 seconds


"" =: comment  // comment for simple transfers

"Asm.fif" include

subwallet-id (.) 1 ' $+ does : +subwallet


{ find 0<> dup ' nip if } : (def?)


// In stack: init?, index,  collection address, owner_address, body

$6 "wallet-query" replace-if-null =: savefile

cr ."ok!" cr

{ bl word 1 {
  dup find { " -?" $+ abort } ifnot nip execute
} } :: @'

variable base

{ bl word 1 {
  dup find { " -?" $+ abort } ifnot nip execute
} } :: @'

0x35 runvmx // Runvm, in stack now seqno
2drop drop

{ 2 'nop does create } : 2constant

{ 2 'nop does create } : 2constant


<b
  0 32 u, // seqno
  0 32 u, // subwallet-id
  public_key B, // add bin public key to cell
b>

subwallet-id (.) 1 ' $+ does : +subwallet


// { bl word dup (def?) { 2drop skip-to-eof } { swap 1 'nop does swap 0 (create) } cond } : library-version

."Query expires in " timeout . ."seconds" cr

variable base

{ swap 10 /mod char 0 + rot swap hold } : #
"Asm.fif" include

{ over abs <# rot 1- ' x# swap times x#s rot sign #> nip } : (0x.)

$# dup 5 < swap 7 > or ' usage if

// Here goes master message

false =: force-bounce

{ 0< { char - hold } if } : sign

// { 3 untuple } : untriple
