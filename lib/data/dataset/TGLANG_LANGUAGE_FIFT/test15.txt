
// { null ' cons rot times } : list

// internal_transfer



^reset ."üòè NFT individual content: "  nft-data ^green  (dump) type cr

{ dup 10 < { 48 } { 55 } cond + } : Digit

"Hello, world!" constant hello
hello type cr

rot .s


true constant bounce

{ dup 10 < { 48 } { 55 } cond + } : Digit

// msg slice

{ "" swap { 0 word 2dup $cmp } { rot swap $+ +cr swap } while 2drop } : scan-until-word

IF:<{	//  x n
    SWAP	//  n x
    32 RSHIFT#	//  n x
    SWAP	//  x n
    32 ADDCONST	//  x n
}>	//  x n
16 PUSHINT	//  x n _24=16
exp INLINECALLDICT	//  x n _25
s2 s(-1) PUXC	//  x n x _25
GEQ	//  x n _26


begin-options
     " <filename-base> <dest-addr> <subwallet-id> <seqno> <amount> [-x <extra-amount>*<extra-currency-id>] [-n|-b] [-t<timeout>] [-B <body-boc>] [-C <comment>] [<savefile>]" +cr +tab
    +"Creates a request to advanced wallet created by new-wallet-v3.fif, with private key loaded from file <filename-base>.pk "
    +"and address from <filename-base>.addr, and saves it into <savefile>.boc ('wallet-query.boc' by default)"
    disable-digit-options generic-help-setopt
  "n" "--no-bounce" { false =: allow-bounce } short-long-option
    "Clears bounce flag" option-help
  "b" "--force-bounce" { true =: force-bounce } short-long-option
    "Forces bounce flag" option-help
  "x" "--extra" { $>xcc extra-cc+! } short-long-option-arg
    "Indicates the amount of extra currencies to be transfered" option-help
  "t" "--timeout" { parse-int =: timeout } short-long-option-arg
    "Sets expiration timeout in seconds (" timeout (.) $+ +" by default)" option-help
  "B" "--body" { =: body-fift-file } short-long-option-arg
    "Sets the payload of the transfer message" option-help
  "C" "--comment" { =: comment } short-long-option-arg
    "Sets the comment to be sent in the transfer message" option-help
  "m" "--mode" { parse-int =: send-mode } short-long-option-arg
    "Sets transfer mode (0..255) for SENDRAWMSG (" send-mode (.) $+ +" by default)"
    option-help
  "h" "--help" { usage } short-long-option
    "Shows a help message" option-help
parse-options

{ (0X.) type } : 0X._

{ dup * } : square

// { 1 untuple } : unsingle


<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>

^reset ."üëø NFT index: " ^green index (dump) type cr

{ 16 b# } : x#

{ 2 base ! } : binary

{ dup square square * } : **5
3 **5 .

// { (.) type } : ._

// parse new c4 cell

// create a message
<b b{01} s, bounce 1 i, b{000} s, dest_addr Addr, amount Gram+cc, 0 9 64 32 + + u,
  body-cell <s 2dup 1 s-fits-with? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b>

index
nft-body
68445 // function selector (get_nft_content)

PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC recv_internal
  128253 DECLMETHOD get_total
}END>c

swap 0<> abort"exit code"


{ 0< { char - hold } if } : sign

^reset ."üòè NFT individual content: " nft-data B>$ ^green  (dump) type cr


<s
^reset ."ü§™ NFT type tag: " 8 u@+ swap  ^green (dump) type cr

{ 8 base ! } : octal

1000000000 constant send_amount

{ s>c hashB } : shash

<s dup 32 u@ // get seqno from cell
swap ref@ // get ref on first cell


{ { # over 0<= } until } : #s

<b
  0x595f07bc 32 u, // op::burn
  12345 64 u, // query_id
  5000000000 Gram, // Burning 5 jettons
  0 3 u, // addr_none for resp_dst and no custom payload
b>

IF:<{	//  x n
    SWAP	//  n x
    16 RSHIFT#	//  n x
    SWAP	//  x n
    16 ADDCONST	//  x n
}>	//  x n

// { swap sbitrefs -rot + rot brembitrefs -rot <= -rot <= and } : s-fits-with?


nft-body <s dup sbits 8 / B@ constant nft-data


// { 1 [] } : cdr

// { true (atom) drop } : atom

// { swap sbitrefs -rot + rot brembitrefs -rot <= -rot <= and } : s-fits-with?

<b
  0x595f07bc 32 u, // op::burn
  12345 64 u, // query_id
  5000000000 Gram, // Burning 5 jettons
  0 3 u, // addr_none for resp_dst and no custom payload
b>

{ null swap ! } : null!

// { over tuple? { swap count = } { 2drop false } cond } : tuple-len?

."seqno=0x" seqno x. ."bounce=" bounce . cr

$1 =: file-path

// { ._ space } : .

^reset ."üëª NFT owner: "  addr@ -rot 2constant nft_owner_address nft_owner_address rot ^green  print-addr cr //  In stack: collection address SLICE, body SLICE, owner_address SLICE

{ bl word 1 { find 0= abort"word not found" } } :: (')

{ 0 word drop 0 'nop } :: //
"Asm.fif" include

// { dup abs <# #s rot sign #> nip } : (.)

<b
  0x595f07bc 32 u, // op::burn
  12345 64 u, // query_id
  5000000000 Gram, // Burning 5 jettons
  0 3 u, // addr_none for resp_dst and no custom payload
b>

1 2 3 triple 4 5 6 triple 7 8 9 triple triple constant Matrix
Matrix .dump cr
| 1 "one" pair , 2 "two" pair , 3 "three" pair , .dump

"Lists.fif" include

#!/usr/bin/fift -s

// { 1 tuple-len? } : single?

// c4 cell

// a b --
{ swap ._ ."/" . } : R.
1.7 2/3 R- R.

."(Saved to file " type .")" cr
"TonUtil.fif" include


cr ."ok!" cr

// a b --
{ swap ._ ."/" . } : R.
1.7 2/3 R- R.

{ minmax drop } : min

$1 =: file-path

0xf8a7ea5 constant op_transfer


// { -rot pair swap ! } : 2!

// a b c d -- (a*d-b*c) b*d
{ -rot over * 2swap tuck * rot - -rot * } : R-

<b nft_owner_address Addr, b> <s   // myself
null            // global_config
10 tuple 1 tuple constant c7 // save as c7 cell


<s 64 u@ // get message from second cell
swap // get seqno from cell to top
// you will see that integer and cell slice are in stack
// print seqno (it is just int in stack)

"GetOpt.fif" include


"../build/nft_collection.fif" include constant collection-code

#!/usr/bin/fift -s

{ swap 10 /mod char 0 + rot swap hold } : #

"./collection-data.fif" include constant collection-data

dictnew
0b1100 b{1100} 2 exch 4 udict! drop

dest_addr 2dup bounce 7 + .Addr ." = " .addr

{ 1 swap +! } : 1+!

{ tuck @ swap - swap ! } : -!


<b
  0 32 u, // seqno
  0 32 u, // subwallet-id
  public_key B, // add bin public key to cell
b>

^reset ."üëª NFT owner: "  addr@ -rot 2constant nft_owner_address nft_owner_address rot ^green  print-addr cr //  In stack: collection address SLICE, body SLICE, owner_address SLICE

{ bl word 2 2 ' (create) } :: :_

avg PROCREF:<{
//  x y
ADD	//  _2
1 RSHIFT#	//  _4
}>

60 =: timeout   // external message expires in 60 seconds

{ 8 base ! } : octal


"build/contract.pk" load-generate-keypair // generate key pair
constant private_key  // save private to constant
constant public_key // save public to constant

{ bl word 1 {
  dup find { " -?" $+ abort } ifnot nip execute
} } :: @'

true =: allow-bounce

// { 1 [] } : second

{ <b swap s, b> } : s>c

{ bl word 1 { -rot 2 'nop does swap 0 (create) }
} :: 2=:

// { 3 tuple } : triple

^reset ."üêæ NFT data: "  <b collection-nft-data  B, nft-data B, b> <s dup sbits 8 / B@ B>$ ^cyan (dump) type cr


{ dup 10 < { 48 } { 55 } cond + } : Digit

$>smca 0= abort"Specify valid send addr"

{ 8 base ! } : octal

{ 16 base ! } : hex

^reset ."üêæ NFT data: "  <b collection-nft-data  B, nft-data B, b> <s dup sbits 8 / B@ ^cyan  (dump) type cr

."Body of transfer message is " body-cell <s csr. cr


"Asm.fif" include

// { bl word dup (def?) { 2drop skip-to-eof } { swap 1 'nop does swap 0 (create) } cond } : library-version
