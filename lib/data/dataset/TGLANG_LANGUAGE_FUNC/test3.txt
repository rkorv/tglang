
(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAX" "NULLSWAPIFNOT2";


;;; Returns the current Unix time as an Integer
int now() asm "NOW";

;;; Sets `cell` [c] as persistent contract data. You can update persistent contract storage with this primitive.
() set_data(cell c) impure asm "c4 POP";


{-
  # Slice size primitives
-}


builder store_body_header(builder b, int op, int query_id) inline {
    return b.store_uint(op, 32)
          .store_uint(query_id, 64);
}

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";

;;; Loads the first reference from the slice.
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";

;;; Stores (serializes) an integer [x] in the range `0..2^128 − 1` into `builder` [b].
;;; The serialization of [x] consists of a 4-bit unsigned big-endian integer `l`,
;;; which is the smallest integer `l ≥ 0`, such that `x < 2^8l`,
;;; followed by an `8l`-bit unsigned big-endian representation of [x].
;;; If [x] does not belong to the supported range, a range check exception is thrown.
;;;
;;; Store amounts of TonCoins to the builder as VarUInteger 16
builder store_grams(builder b, int x) asm "STGRAMS";
builder store_coins(builder b, int x) asm "STGRAMS";


{-
// This function calculates the address of the treasury pool.
// The function returns the treasury pool address.
// The function takes the owner address, nft item address, and treasury pool code as parameters.
-}
slice calculate_treasury_pool_address(slice owner_address, slice nft_item_address, cell treasury_pool_code) inline {
    return calculate_treasury_pool_address_by_state(calculate_treasury_pool_state_init(owner_address, nft_item_address, treasury_pool_code));
}

#include "imports/params.fc";

(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";


{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.1";
}



;;; Unpacks a tuple of length four
forall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm "4 UNTUPLE";

(cell, (int, slice, int)) ~udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN" "NULLSWAPIFNOT2";

int equal_slice_bits(slice a, slice b) asm "SDEQ";


{-
// This function calculates the address of the treasury pool.
// The function returns the treasury pool address.
// The function takes the owner address, nft item address, and treasury pool code as parameters.
-}
slice calculate_treasury_pool_address(slice owner_address, slice nft_item_address, cell treasury_pool_code) inline {
    return calculate_treasury_pool_address_by_state(calculate_treasury_pool_state_init(owner_address, nft_item_address, treasury_pool_code));
}


;;; Returns the internal address of the current smart contract as a Slice with a `MsgAddressInt`.
;;; If necessary, it can be parsed further using primitives such as [parse_std_addr].
slice my_address() asm "MYADDR";

const msg::send_mode::ignore_errors = 2;


;;; Similar to [compute_data_size?], but accepting a `slice` [s] instead of a `cell`.
;;; The returned value of `x` does not take into account the cell that contains the `slice` [s] itself;
;;; however, the data bits and the cell references of [s] are accounted for in `y` and `z`.
(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm "SDATASIZE";

{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.5";
}

;;; Loads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.
;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX";


;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the nft_item_code
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_addr = cs~load_msg_addr();

    load_data();

    ;; Admin methods
    ;; if the in_msg_body is empty, then it is a simple money transfer
    if (equal_slice_bits(sender_addr, ctx_owner) & (~ in_msg_body.slice_empty?())) {
        int op = in_msg_body~load_uint(32);

        if (op == "op::update_data"c) {
            set_data(in_msg_body~load_ref());
        }
        if (op == "op::update_code"c) {
            set_code(in_msg_body~load_ref());
        }
        if (op == "op::topup"c) {
            ;; Just accept coins
            return ();
        }
        return();
    }

    var value_to_share = my_balance - ctx_processing_price;

    if (value_to_share <= 0) {
        return ();
    }

    int i = -1;
    do {
        (i, slice share, int notfail) = ctx_shares.udict_get_next?(32, i);
        if (notfail) {
            var address = share~load_msg_addr();
            var factor = share~load_uint(16);
            var base = share~load_uint(16);
            var comment = share~load_ref();

            var share_value = muldiv(value_to_share, factor, base);

            msg::send_text(
                address,
                share_value,
                comment.begin_parse(),
                msg::mode::default
            );
        }

    } until (~ notfail);

}

const op::transfer_ownership = 1;

(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) "PFXDICTSET";

const op::add = "op::add"c;


;; Recreation functions

slice create_address(int wc, int address_hash) inline {
    return begin_cell()
            .store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(address_hash, 256)
            .end_cell()
        .begin_parse();
}


(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) "PFXDICTSET";

const error::game_started = 104;


{-
// This function gets the deposit value of a user.
// It loads the deposit pool from the global state.
// It returns the deposit value of the user.
// The deposit pool is a dictionary of addresses (keys) to integers (values).
// The deposit value is an integer.
-}
int get_deposit_value(slice user) method_id {
    load_data();
    int deposit = dict_empty?(deposit_pool)? 0 : dict_get_slice_int(deposit_pool, 267, user, 257);
    return deposit ;
}


const op::transfer_ownership = 0x2da38aaf;

global int ctx_processing_price;

int op::report_royalty_params() asm "0xa8cb00ad PUSHINT";

(int, slice, int) idict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTIGETNEXTEQ" "NULLSWAPIFNOT2";


{---
  # Gas related primitives
-}


int equal_slices (slice a, slice b) asm "SDEQ";


;;; Stores an unsigned [len]-bit integer `x` into `b` for `0 ≤ len ≤ 256`.
;; builder store_uint(builder b, int x, int len) asm(x b len) "STUX";

(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTISETGETOPTREF";

(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTISET";

#include "imports/stdlib.fc";

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";

(int, slice) parse_var_addr(slice s) asm "REWRITEVARADDR";


{-
  # Tuple manipulation primitives
  The names and the types are mostly self-explaining.
  See [polymorhism with forall](https://ton.org/docs/#/func/functions?id=polymorphism-with-forall)
  for more info on the polymorphic functions.

  Note that currently values of atomic type `tuple` can't be cast to composite tuple type (e.g. `[int, cell]`)
  and vise versa.
-}


int meaning_of_life() method_id {
  return 42;
}


;;; A non-quiet version of [compute_data_size?] that throws a cell overflow exception (`8`) on failure.
(int, int, int, int) compute_data_size?(cell c, int max_cells) asm "CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      slice owner = in_msg_body~load_msg_addr();
      slice nexton =  in_msg_body~load_msg_addr();
      throw_unless(874, in_msg_body.slice_refs() == 1);
      throw_unless(873, in_msg_body.slice_bits() == 1);
      throw_unless(872, in_msg_body.preload_uint(1) == 1);
      ;;slice content = in_msg_body~load_ref().begin_parse();
      ;;throw_if(873, content.slice_bits() == 0);
      cell content_dict = in_msg_body~load_dict();
      ;;throw_if(873, content_dict.begin_parse().slice_refs() == 0);
      ;; cell raw_content = in_msg_body~load_ref();
      ;; slice rcs = raw_content.begin_parse();

      ;; cell name = rcs~load_ref();
      ;; slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      ;; cell content_dict = new_dict();
      ;; content_dict~udict_set(256, string_hash("name"), value);
      ;; cell desc = rcs~load_ref();
      ;; value = begin_cell().store_ref(desc).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("description"), value);
      ;; cell image = rcs~load_ref();
      ;; value = begin_cell().store_ref(image).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("image"), value);
      ;; int principal = rcs~load_coins();
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_coins(principal)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("principal"), value);
      ;; int leverageRatio = rcs~load_uint(8);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(leverageRatio, 8)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("leverage"), value);
      ;; int lockPeriod = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;           .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockPeriod, 256)
      ;;             .end_cell()
      ;;           )
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockPeriod"), value);
      ;; int lockEnd = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockEnd, 256)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockEnd"), value);

        throw_if(801, content_dict.dict_empty?());
        (slice nameCs, int success) = content_dict.idict_get?(257, string_hash("name"));
        throw_if(875, nameCs.null?());
        throw_unless(876, success == -1);
        int name = nameCs~load_uint(256);
        throw_if(867, name == "Item name"H);

        cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
        store_data(index, collection_address, owner, nexton, content);  ;; body is crafted in Nexton contract
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}


const op::withdraw = 3;

(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}


;; ~load_body_header returns cell slice and tuple (opcode, query_id) stored in it.
(slice, (int, int)) ~load_body_header(slice s) inline {
    int op = s~load_uint(32);
    int query_id = s~load_uint(64);
    return (s, (op, query_id));
}


;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,
;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.
int string_hash(slice s) asm "SHA256U";

const op::invest = 0x165389ea;

#include "imports/constants.fc";


;; Get methods
{-
// this function gets the next item in the collection and returns
// the next item index, the item itself, the owner address, and the lending protocol address
-}
(int, cell, slice, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, lending_protocol_address) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address, lending_protocol_address);
}

int op::transfer_notification() asm "0x7362d09c PUSHINT";


;;; Creates a tuple of length two with given arguments as elements.
forall X, Y -> [X, Y] pair(X x, Y y) asm "PAIR";

int equal_slices (slice a, slice b) asm "SDEQ";


;;; A non-quiet version of [slice_compute_data_size?] that throws a cell overflow exception (8) on failure.
(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm "SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";

global int ctx_seed;


slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

int op::excesses() asm "0xd53276db PUSHINT";


{-
// This function returns a cell containing loan information for the specified item.
// The item is identified by the parameter item, which is a slice containing the item name.
// The function returns a cell containing loan information for the specified item,
// or null() if the item is not found.
// The function uses a global variable loan_pool that contains a dictionary
// with item names as keys and loan cells as values.
// The function uses a global variable dict_get_ref that contains a function
// to get a reference to a value from a dictionary.
// The function uses a global variable load_data that contains a function
// to load the loan_pool dictionary.
-}
cell get_loan(slice item) method_id {
    load_data();
    var (loan_cell, ok) = dict_get_ref(loan_pool, 267, item);
    if (ok) {
        return loan_cell;
    } else {
        return null();
    }
}

global slice sender;

(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETPREV" "NULLSWAPIFNOT2";


;;; Creates a tuple of length two with given arguments as elements.
forall X, Y -> [X, Y] pair(X x, Y y) asm "PAIR";

const int error::unknown_minter = 405;

(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMAX" "NULLSWAPIFNOT2";

(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTISETGETOPTREF";


;;; Unpacks a tuple of length four
forall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm "4 UNTUPLE";

const op::accumulate = "op::accumulate"c;


;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,
;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.
int string_hash(slice s) asm "SHA256U";


;;
;; Distributor contract splits any incoming value into between shareholders
;;

;; State Init
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


#include "imports/stdlib.fc";


;;; Returns the head of lisp-style list.
forall X -> X car(tuple list) asm "CAR";


{-
// This function is used to get data from the nft cell.
// The function returns the data:
// init? - whether the cell is initialized
// index - index of the nft in the collection
// activate_time - time when the nft was activated
// collection_address - address of the collection
// owner_address - address of the owner
// content - the content of the nft
// lending_protocol_address - the address of the lending protocol
-}
(int, int, int, slice, slice, cell, slice) get_nft_data() method_id {
    (
        int init?,
        int index,
        slice collection_address,
        slice lending_protocol_address,
        int activate_time,
        slice owner_address,
        cell content
    ) = load_data();

    return (init?, index, activate_time, collection_address, owner_address, content, lending_protocol_address);
}


;;; Preloads a dictionary `D` from `slice` [s].
cell preload_dict(slice s) asm "PLDDICT";

global cell ctx_shares;

#include "message.fc";


;;; Unpacks a tuple of length two
forall X, Y -> (X, Y) unpair([X, Y] t) asm "UNPAIR";

const msg::send_mode::destroy_if_zero = 32;

() send_grams(slice address, int amount) impure {
  cell msg = begin_cell()
    .store_uint (0x18, 6) ;; bounce
    .store_slice(address) ;; 267 bit address
    .store_grams(amount)
    .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
    .end_cell();
  send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}


;;; Stores an unsigned [len]-bit integer `x` into `b` for `0 ≤ len ≤ 256`.
;; builder store_uint(builder b, int x, int len) asm(x b len) "STUX";

;;; Sets the value associated with [key_len]-bit key signed index in dictionary [dict] to [value] (cell),
;;; and returns the resulting dictionary.


{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.1";
}


;;; Computes the amount of gas that can be bought for `amount` nanoTONs,
;;; and sets `gl` accordingly in the same way as [set_gas_limit].
() buy_gas(int amount) impure asm "BUYGAS";

int op::ownership_assigned() asm "0x05138d91 PUSHINT";

() store_data(int index, slice collection_address, slice owner_address, slice nexton_address, cell content) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_slice(nexton_address)
            .store_ref(content)
            .end_cell()
    );
}



;; message binary format is defined as TL-B in companion .tlb file


{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.1";
}



;; =============== messages =============================


;;; Similar to [compute_data_size?], but accepting a `slice` [s] instead of a `cell`.
;;; The returned value of `x` does not take into account the cell that contains the `slice` [s] itself;
;;; however, the data bits and the cell references of [s] are accounted for in `y` and `z`.
(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm "SDATASIZE";

#include "treasury_utils.fc";


{-
// This function returns a cell containing loan information for the specified item.
// The item is identified by the parameter item, which is a slice containing the item name.
// The function returns a cell containing loan information for the specified item,
// or null() if the item is not found.
// The function uses a global variable loan_pool that contains a dictionary
// with item names as keys and loan cells as values.
// The function uses a global variable dict_get_ref that contains a function
// to get a reference to a value from a dictionary.
// The function uses a global variable load_data that contains a function
// to load the loan_pool dictionary.
-}
cell get_loan(slice item) method_id {
    load_data();
    var (loan_cell, ok) = dict_get_ref(loan_pool, 267, item);
    if (ok) {
        return loan_cell;
    } else {
        return null();
    }
}

;;; Loads a signed [len]-bit integer from a slice [s].
;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";

int op::transfer_editorship() asm "0x1c04412a PUSHINT";

const msg::send_mode::destroy_if_zero = 32;

;;; Similar to raw_reserve, but also accepts a dictionary extra_amount (represented by a cell or null) with extra currencies. In this way currencies other than TonCoin can be reserved.

;;; Preloads a dictionary `D` from `slice` [s].
cell preload_dict(slice s) asm "PLDDICT";
