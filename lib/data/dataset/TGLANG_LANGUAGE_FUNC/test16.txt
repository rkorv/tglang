
() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

int equal_slices (slice a, slice b) asm "SDEQ";

int op::get_royalty_params() asm "0x693d3950 PUSHINT";

(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMINREF" "NULLSWAPIFNOT2";


{-
  # Lisp-style lists

  Lists can be represented as nested 2-elements tuples.
  Empty list is conventionally represented as TVM `null` value (it can be obtained by calling [null()]).
  For example, tuple `(1, (2, (3, null)))` represents list `[1, 2, 3]`. Elements of a list can be of different types.
-}

;;; Loads a signed [len]-bit integer from a slice [s].
;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";

#include "imports/stdlib.fc";

;; Send royalty parameters
() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}


int op::transfer() asm "0x5fcc3d14 PUSHINT";

{-
// This function sends a message to a given address with a given amount of grams, operation type, and query id.
// It also accepts an optional builder which is used to construct the message body.
// The message is sent with a given send_mode.
-}
() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}


int add(int a, int b) asm "ADD";

const int error::not_an_oracle = 402;


;;; Returns the fourth element of a tuple (with unknown element types).
forall X -> X fourth(tuple t) asm "3 INDEX";

int op::mint() asm "21 PUSHINT";

const msg::mode::carry_remaining_value = 64;

(slice, int, cell, cell, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return
    (
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_msg_addr() ;; lending_protocol_address
    );
}


() save_data(slice owner_address, int counter) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(counter, 64)
    .end_cell());
}


;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,
;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.
int string_hash(slice s) asm "SHA256U";

const msg::mode::separate_gas = 1;

() recv_internal() { }

;; State Init
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


const msg::mode::carry_remaining_balace = 128;

;;; Returns the first `0 ≤ len ≤ 1023` bits of `slice` [s].
slice first_bits(slice s, int len) asm "SDCUTFIRST";

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
            .store_uint(0, 2)
            .store_dict(jetton_wallet_code)
            .store_dict(pack_jetton_wallet_data(0, owner_address, jetton_master_address, jetton_wallet_code))
            .store_uint(0, 1)
            .end_cell();
}



(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null()); ;; nft not initialized yet
    }
}



;; Jettons

(int, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();
    var (index, owner_address, pool_code) = (ds~load_uint(64), ds~load_msg_addr(), ds~load_ref()); ;; treasury_pool_code
    ds.end_parse();
    return (index, owner_address, pool_code);
}


{-
// This code withdraws a specified amount.
//
// Arguments:
//     receiver: the address of the receiver
//     withdraw_amount: the amount of tokens to withdraw
//     owner_address: the address of the pool owner
//     balance: the balance of the pool
//
// Returns:
//     the new balance of the pool
-}
(int) withdraw(slice receiver, int withdraw_amount, slice owner_address, int balance) impure {
    throw_unless(501, equal_slices(receiver, owner_address));
    throw_unless(502, balance >= withdraw_amount);
    int send_amount = withdraw_amount + min_tons_for_withdraw();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(receiver)
            .store_coins(send_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; see more detail in message scheme
            .end_cell();
    send_raw_message(msg, 1);
    int new_balance = balance - withdraw_amount;
    return new_balance;
}

slice calculate_address_by_state_init(cell state_init) inline {
    return create_address(workchain(), cell_hash(state_init));
}

global int ctx_id;

const msg::mode::ignore_errors = 2;

{-
// this function adds the deposit amount to the balance
// it is used to increase the balance of an account
// sender is the account that is making the deposit
// deposit_amount is the amount of money that the account is depositing
// balance is the current balance of the account
-}
(int) deposit(slice sender, int deposit_amount, int balance) impure {
    throw_unless(500, deposit_amount >= 0);
    int new_balance = balance + deposit_amount;
    return new_balance;
}


;; Item Address
slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}


int builder_null?(builder b) asm "ISNULL";

const int error::empty_msg_body = 401;


slice owner() method_id {
    load_data();
    return ctx_owner;
}

int op::get_royalty_params() asm "0x693d3950 PUSHINT";

;;; Returns the persistent contract storage cell. It can be parsed or modified with slice and builder primitives later.
cell get_data() asm "c4 PUSH";


(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTSETB";

int op::burn_notification() asm "0x7bdd97de PUSHINT";

;;; Transforms a `slice` [s] into a simple ordinary continuation `c`, with `c.code = s` and an empty stack and savelist.
cont bless(slice s) impure asm "BLESS";

;;; Loads an unsigned [len]-bit integer from a slice [s].
;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";


;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,
;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.
int string_hash(slice s) asm "SHA256U";

int __test_addition_short() {
  return invoke_gas(add, [5, 3]);
}

#include "imports/stdlib.fc";

const op::transfer_ownership = 0x2da38aaf;

int __test_six() {
  return 0xA;
}

global cell ctx_shares;

() emit_log (int event_id, cell data, int query_id) impure inline {
    var msg = begin_cell()
        .store_uint(12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint(1, 2)          ;; addr_extern$01
        .store_uint(256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if(null?(data)) {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_uint(query_id, 64);
    } else {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_ref(data);
    }

    send_raw_message(msg.end_cell(), 0);
}


(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUADD";

slice log_address_rand_seed()  asm "b{01} b{001101000} |+ x{0000000052414E443A53454544} |+ PUSHSLICE";
slice log_address_rand_value() asm "b{01} b{001110000} |+ x{0000000052414E443A56414C5545} |+ PUSHSLICE";


() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, slice lending_protocol_address) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code, lending_protocol_address);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

(slice, int) idict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGET" "NULLSWAPIFNOT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}



;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;


int workchain() asm "0 PUSHINT";


{-
// This code withdraws a specified amount.
//
// Arguments:
//     receiver: the address of the receiver
//     withdraw_amount: the amount of tokens to withdraw
//     owner_address: the address of the pool owner
//     balance: the balance of the pool
//
// Returns:
//     the new balance of the pool
-}
(int) withdraw(slice receiver, int withdraw_amount, slice owner_address, int balance) impure {
    throw_unless(501, equal_slices(receiver, owner_address));
    throw_unless(502, balance >= withdraw_amount);
    int send_amount = withdraw_amount + min_tons_for_withdraw();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(receiver)
            .store_coins(send_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; see more detail in message scheme
            .end_cell();
    send_raw_message(msg, 1);
    int new_balance = balance - withdraw_amount;
    return new_balance;
}

const msg::mode::carry_remaining_value = 64;


slice charity_address() method_id {
  var (_, _, _, charity_address) = load_data();
  return charity_address;
}

;;; Loads a signed [len]-bit integer from a slice [s].
;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";

;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)
;;; so that the current execution is considered “successful” with the saved values even if an exception
;;; in Computation Phase is thrown later.
() commit() impure asm "COMMIT";

const int error::not_an_oracle = 402;

() emit_log (int event_id, cell data, int query_id) impure inline {
    var msg = begin_cell()
        .store_uint(12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint(1, 2)          ;; addr_extern$01
        .store_uint(256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if(null?(data)) {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_uint(query_id, 64);
    } else {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_ref(data);
    }

    send_raw_message(msg.end_cell(), 0);
}



slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

int workchain() asm "0 PUSHINT";


() save_data(slice owner_address, int counter) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(counter, 64)
    .end_cell());
}

;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell item_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the state_init
  slice item_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(item_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            ;; msg_body
            .store_ref(item_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}



;;; Checks whether [signature] is a valid Ed25519-signature of the data portion of `slice data` using `public_key`,
;;; similarly to [check_signature].
;;; If the bit length of [data] is not divisible by eight, throws a cell underflow exception.
;;; The verification of Ed25519 signatures is the standard one,
;;; with sha256 used to reduce [data] to the 256-bit number that is actually signed.
int check_data_signature(slice data, slice signature, int public_key) asm "CHKSIGNS";

const msg::send_mode::ignore_errors = 2;

int op::burn_notification() asm "0x7bdd97de PUSHINT";


() save_data(cell contributors, slice owner, int percentage_payoff, int deadline, int total_pledge) impure inline{
    set_data(begin_cell()
            .store_ref(contributors)
            .store_slice(owner)
            .store_uint(percentage_payoff)
            .store_uint(deadline)
            .store_uint(total_pledge)
            .end_cell())
}

const msg::mode::carry_remaining_balace = 128;

const op::add = "op::add"c;


;; Before passing control to recv_internal TVM puts the following elements on stack.
;; my_balance -> Smart contract balance (in nanoTons)
;; msg_value -> Incoming message balance (in nanoTons)
;; in_msg_full -> Cell with an incoming message
;; in_msg_body -> Incoming message body, slice type
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ;; Every message has a strict layout, thus by parsing it, we can get the sender’s address
    ;; first, we need to read some tech flags and then take the address using load_msg_addr (from stdlib)
    slice sender_addr = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; check the caller (sender_addr) is the contract owner (ctx_owner) first
    if (equal_slice_bits(sender_addr, ctx_owner)) {
        ;; in this case, it could also be done in the single op::increase handler, but generally you would want
        ;; to populate storage variables as soon as all preliminary checks which do not need storage pass
        ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

        if (op == op::add) { ;; handle op::increase
            int a = in_msg_body~load_uint(32); ;; read 'a' value
            int b = in_msg_body~load_uint(32); ;; read 'b' value

            ctx_result = sum(a,b);

            save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()

            msg::send_result(
                ctx_tracker_contract_addr,
                ctx_result,
                op::accumulate,
                msg::send_mode::carry_remaining_value
            );

            return (); ;; this message is handled so we return
        }

    }

    if(op == op::check_signature) {
        ~strdump("*** IN check_signature");
        slice data = in_msg_body~load_ref().begin_parse(); ;; first ref contains actual message that was signed
        int hash = in_msg_body~load_uint(256);
        slice signature = in_msg_body~load_ref().begin_parse();
        int public_key = in_msg_body~load_uint(256);

        ;; ~dump(hash);
        ;; ~dump(signature);
        ;; ~dump(public_key);

        ;; call check_signature (-1 is valid / 0 is NOT valid)
        int valid = check_signature(hash, signature, public_key);

        ~dump(valid);

        slice owner_addr = data~load_msg_addr();
        int id = data~load_uint(32);
        int result = data~load_uint(32);
        slice tracker_contract_addr = data~load_msg_addr();

        ;; ~dump(result);
        ;; check the message was sgined by the owner
        ;; then check the message was signed by a specific account
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}


;;; Returns the third element of a triple tuple.
forall X, Y, Z -> Z triple_third([X, Y, Z] p) asm "THIRD";


() recv_external(int balance, int msg_value, cell msg_full, slice in_msg) {
  if (balance < 10 * 1000 * 1000) { return (); }
  accept_message();

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_seed())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Seed: ")
    .store_number(digitize_number(get_seed()))
    .end_cell(), 0);

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_value())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Rand: ")
    .store_number(digitize_number(random()))
    .end_cell(), 0);
}



{-
// This function loads the loan pool from the storage.
// The loan pool is a global variable that is used
// by all functions in this file.
-}
cell get_loan_pool() method_id {
    load_data();
    return loan_pool;
}

;;; Computes the maximum of two integers [x] and [y].
int max(int x, int y) asm "MAX";


;;; Returns the logical time of the current transaction.
int cur_lt() asm "LTIME";

;;; Decomposes slice [s] containing a valid `MsgAddress` into a `tuple t` with separate fields of this `MsgAddress`.
;;; If [s] is not a valid `MsgAddress`, a cell deserialization exception is thrown.
tuple parse_addr(slice s) asm "PARSEMSGADDR";

int __test_modulo_multiplication_short() {
  return invoke_gas(mul_mod, [5, 3, 7]);
}


slice charity_address() method_id {
  var (_, _, _, charity_address) = load_data();
  return charity_address;
}

(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMIN" "NULLSWAPIFNOT2";

global int ctx_seed;

;; NFT collection smart contract


{-
  # Persistent storage save and load
-}


cell new_dict() asm "NEWDICT";

slice log_address_rand_seed()  asm "b{01} b{001101000} |+ x{0000000052414E443A53454544} |+ PUSHSLICE";
slice log_address_rand_value() asm "b{01} b{001110000} |+ x{0000000052414E443A56414C5545} |+ PUSHSLICE";

;; operations (constant values taken from crc32 on op message in the companion .tlb files and appear during build)

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}


(slice, int, cell, cell, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return
    (
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref(), ;; nft_item_code
        ds~load_msg_addr() ;; lending_protocol_address
    );
}

(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETPREV" "NULLSWAPIFNOT2";

(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAX" "NULLSWAPIFNOT2";

int op::transfer_editorship() asm "0x1c04412a PUSHINT";


;;; Returns the first element of a tuple (with unknown element types).
forall X -> X first(tuple t) asm "FIRST";

() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm "RAWRESERVEX";

;;; Checks whether a dictionary is empty. Equivalent to cell_null?.

;; Item Address
slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}


int __test_multiplication_128() {
  return invoke_gas(mul, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125)]);
}

int op::editorship_assigned() asm "0x511a4463 PUSHINT";
