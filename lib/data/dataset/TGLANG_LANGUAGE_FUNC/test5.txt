
() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}


#include "imports/stdlib.fc";


;; Get methods


{-
// This function gets the deposit value of a user.
// It loads the deposit pool from the global state.
// It returns the deposit value of the user.
// The deposit pool is a dictionary of addresses (keys) to integers (values).
// The deposit value is an integer.
-}
int get_deposit_value(slice user) method_id {
    load_data();
    int deposit = dict_empty?(deposit_pool)? 0 : dict_get_slice_int(deposit_pool, 267, user, 257);
    return deposit ;
}



;; Recreation functions

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

#include "message.fc";


{-
// This function gets the address of an NFT item by index.
// The NFT item is specified by the index of the NFT item.
-}
slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, lending_protocol_address) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code, lending_protocol_address);
    return calculate_nft_item_address(workchain(), state_init);
}

(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) "PFXDICTDEL";

const error::unknown_op = 101;


;;; A non-quiet version of [slice_compute_data_size?] that throws a cell overflow exception (8) on failure.
(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm "SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";


;;; Creates tuple with zero elements.
tuple empty_tuple() asm "NIL";

{-
  # Builder primitives
  It is said that a primitive _stores_ a value `x` into a builder `b`
  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.
  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).

  All the primitives below first check whether there is enough space in the `builder`,
  and only then check the range of the value being serialized.
-}


;;; A non-quiet version of [compute_data_size?] that throws a cell overflow exception (`8`) on failure.
(int, int, int, int) compute_data_size?(cell c, int max_cells) asm "CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";


{--
  # Debug primitives
  Only works for local TVM execution with debug level verbosity
-}
;;; Dumps the stack (at most the top 255 values) and shows the total stack depth.
() dump_stack() impure asm "DUMPSTK";



;;; Returns the tail of lisp-style list.
tuple cdr(tuple list) asm "CDR";

;;; Checks whether `slice` [s] has no bits of data.
int slice_data_empty?(slice s) asm "SDEMPTY";


slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}


() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

tuple digitize_number(int value)
  asm "NIL WHILE:<{ OVER }>DO<{ SWAP TEN DIVMOD s1 s2 XCHG TPUSH }> NIP";

;;; Returns the value of the global configuration parameter with integer index `i` as a `cell` or `null` value.


int playing() method_id {
  var (_, _, playing, _) = load_data();
  return playing;
}

const op::register = 0x4dcbb5a8;

;;; Returns the last `0 ≤ len ≤ 1023` bits of `slice` [s].
slice slice_last(slice s, int len) asm "SDCUTLAST";


;;; Checks whether [signature] is a valid Ed25519-signature of the data portion of `slice data` using `public_key`,
;;; similarly to [check_signature].
;;; If the bit length of [data] is not divisible by eight, throws a cell underflow exception.
;;; The verification of Ed25519 signatures is the standard one,
;;; with sha256 used to reduce [data] to the 256-bit number that is actually signed.
int check_data_signature(slice data, slice signature, int public_key) asm "CHKSIGNS";

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams; ;; 1.2 %  --> factor = 12; base = 100;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;


int __test_addition_short() {
  return invoke_gas(add, [5, 3]);
}

int op::editorship_assigned() asm "0x511a4463 PUSHINT";

;; ~load_op returns opcode stored in cell slice.
(slice, int) ~load_op(slice s) inline { return s.load_uint(32); }


int op::excesses() asm "0xd53276db PUSHINT";


() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, lending_protocol_address) = load_data();

    if (op == 1) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        if (is_last) {
            deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), lending_protocol_address);
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, lending_protocol_address);
        }
        return ();
    }

    if (op == 3) { ;; change owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, lending_protocol_address);
        return ();
    }
    throw(0xffff);
}

{-
  # Slice primitives

  It is said that a primitive _loads_ some data,
  if it returns the data and the remainder of the slice
  (so it can also be used as [modifying method](https://ton.org/docs/#/func/statements?id=modifying-methods)).

  It is said that a primitive _preloads_ some data, if it returns only the data
  (it can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods)).

  Unless otherwise stated, loading and preloading primitives read the data from a prefix of the slice.
-}


() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}


global slice ctx_owner;

(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";


{-
// transfer_bond - transfer bond from sender to receiver.
// responser - address of the responser.
// receiver - address of the receiver.
// item - the item of the bond.
-}
() transfer_bond(slice responser, slice receiver, slice item) impure {
    var msg = begin_cell()
     .store_uint(0x18, 6)
     .store_slice(item)
     .store_coins(min_tons_for_storage())
     .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
     .store_ref(
        begin_cell()
         .store_uint(0x5fcc3d14, 32)
         .store_uint(0, 64)
         .store_slice(receiver)
         .store_slice(responser)
         .store_uint(0, 1)
         .store_coins(0)
         .store_ref(begin_cell().end_cell())
        .end_cell()
    )
     .end_cell();
    send_raw_message(msg, 0);
}


slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

cell config_param(int x) asm "CONFIGOPTPARAM";

(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAX" "NULLSWAPIFNOT2";

(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTREMMAX" "NULLSWAPIFNOT2";

int op::get_static_data() asm "0x2fcb26a2 PUSHINT";


() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, lending_protocol_address) = load_data();

    if (op == 1) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        if (is_last) {
            deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), lending_protocol_address);
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, lending_protocol_address);
        }
        return ();
    }

    if (op == 3) { ;; change owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, lending_protocol_address);
        return ();
    }
    throw(0xffff);
}

(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTISETB";

{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.5";
}

int workchain() asm "0 PUSHINT";

(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIADD";

const int error::empty_msg_body = 401;


;;; Creates a tuple of length three with given arguments as elements.
forall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm "TRIPLE";

;;; Computes the minimum of two integers [x] and [y].
int min(int x, int y) asm "MIN";

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}



() glory_to_winner(slice winner_address) impure {
  var (_, _, _, charity_address) = load_data();
  var [balance, _] = get_balance();
  ;; TODO Calculate fees for renting
  var winner_amount = balance / 100 * 90;
  var charity_amount = balance / 100 * 10;
  send_grams(winner_address, winner_amount);
  send_grams(charity_address, charity_amount);
}



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (
        int init?,
        int index,
        slice collection_address,
        slice lending_protocol_address,
        int activate_time,
        slice owner_address,
        cell content
    ) = load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        store_data(index, collection_address, lending_protocol_address, 0, in_msg_body~load_msg_addr(), in_msg_body~load_ref());
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
        transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, lending_protocol_address);
        return ();
    }
    if (op == op::get_static_data()) {
        send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }
    if (op == 3) { ;; burn
        throw_unless(401, equal_slices(sender_address, owner_address));
        owner_address = begin_cell().store_uint(0,2).end_cell().begin_parse();
        store_data(index, collection_address, lending_protocol_address, 0, owner_address, content);
        return ();
    }
    if (op == 4) { ;; activate
        throw_unless(401, equal_slices(sender_address, owner_address));
        throw_unless(410, activate_time == 0);  ;; only activate once
        store_data(index, collection_address, lending_protocol_address, now(), owner_address, content);
        return ();
    }
    if (op == 5) { ;; deactivate
        throw_unless(401, equal_slices(sender_address, owner_address));
        store_data(index, collection_address, lending_protocol_address, 0, owner_address, content);
        return ();
    }
    throw(0xffff);
}


{-
// This function starts a loan. It is called by the borrower.
// The borrower sends the amount of the loan as a message value.
// The loan is stored in the loan_pool dictionary, indexed by the item being loaned.
// The borrower is the address of the sender of the message.
// The lender is the address of the sender of the loan message.
// The loan amount is the amount of the message value.
// The repay amount is the amount of the message value.
// The start time is the current time.
// The duration is the duration of the loan, in seconds.
// The borrower sends the item being loaned to the lender.
-}
() start_loan(slice in_msg_body) impure {
    slice investor = in_msg_body~load_msg_addr();
    slice item = in_msg_body~load_msg_addr();
    int amount = in_msg_body~load_uint(120);
    int repay_amount = in_msg_body~load_uint(120);
    int duration = in_msg_body~load_uint(64);

    var (loan_cell, ok) = dict_get_ref(loan_pool, 267, item);
    throw_unless(409, null?(loan_cell));

    transfer_bond(sender ,my_address() ,item);
    withdraw(sender, investor, amount);

    cell loan = begin_cell()
    .store_slice(investor)
    .store_slice(sender)
    .store_uint(amount, 120)
    .store_uint(repay_amount, 120)
    .store_uint(now(), 64)
    .store_uint(duration, 64)
    .end_cell();
    (loan_pool, _) = dict_set_ref(loan_pool ,267 ,item ,loan);
    save_data();
}

int op::transfer() asm "0x5fcc3d14 PUSHINT";

const msg::send_mode::ignore_errors = 2;


() save_data(slice owner_address, int player_counter, int playing, slice charity_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(player_counter, 64)
    .store_uint(playing, 64)
    .store_slice(charity_address)
    .end_cell()
  );
}

global int ctx_result; ;; the result of the add operation

{-
// This code is used to get the pool data, which includes the owner's address
// and the balance of the pool.
-}
(slice, int) get_pool_data() method_id {
    (_, _, _, slice owner_address, int balance) = load_data();
    return (owner_address, balance);
}

int op::internal_transfer() asm "0x178d4519 PUSHINT";


;;; Adds an element to the beginning of lisp-style list.
forall X -> tuple cons(X head, tuple tail) asm "CONS";

{-
  # Dictionary primitives
-}


;;
;; Distributor contract splits any incoming value into between shareholders
;;

;; Auxiliary function


;;
;;  TON NFT Item Smart Contract
;;

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, slice nexton_address) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);

    if (equal_slices(new_owner_address, nexton_address)){
        slice contS = content.begin_parse();
        throw_unless(898,contS.slice_refs() == 1);
        throw_unless(899, contS.slice_bits() > 8);
        ;;throw_if(900, contS.slice_empty?());
        throw_unless(900, contS~load_uint(8) == 0);
        cell contDict = contS~load_dict();
        throw_if(901, contDict.dict_empty?() == -1);
        (slice lockPeriodSlice, int suc) = contDict.udict_get?(256, "lockPeriod"H);
        slice lockPeriodS = lockPeriodSlice~load_ref().begin_parse();

        throw_unless(902, lockPeriodS~load_uint(256) == 600);

        builder notification = begin_cell()
                            .store_uint(index, 64)
                            .store_slice(owner_address)
                            .store_ref(content);

        send_msg(nexton_address, forward_amount, op::claim_rewards(), query_id, notification, 1); ;; paying fees, revert on errors
    }

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }

    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }

    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, nexton_address, content);
}


const msg::mode::destroy_if_zero = 32;


;; Before passing control to recv_internal TVM puts the following elements on stack.
;; my_balance -> Smart contract balance (in nanoTons)
;; msg_value -> Incoming message balance (in nanoTons)
;; in_msg_full -> Cell with an incoming message
;; in_msg_body -> Incoming message body, slice type
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ;; Every message has a strict layout, thus by parsing it, we can get the sender’s address
    ;; first, we need to read some tech flags and then take the address using load_msg_addr (from stdlib)
    slice sender_addr = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; check the caller (sender_addr) is the contract owner (ctx_owner) first
    if (equal_slice_bits(sender_addr, ctx_owner)) {
        ;; in this case, it could also be done in the single op::increase handler, but generally you would want
        ;; to populate storage variables as soon as all preliminary checks which do not need storage pass
        ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

        if (op == op::add) { ;; handle op::increase
            int a = in_msg_body~load_uint(32); ;; read 'a' value
            int b = in_msg_body~load_uint(32); ;; read 'b' value

            ctx_result = sum(a,b);

            save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()

            msg::send_result(
                ctx_tracker_contract_addr,
                ctx_result,
                op::accumulate,
                msg::send_mode::carry_remaining_value
            );

            return (); ;; this message is handled so we return
        }

    }

    if(op == op::check_signature) {
        ~strdump("*** IN check_signature");
        slice data = in_msg_body~load_ref().begin_parse(); ;; first ref contains actual message that was signed
        int hash = in_msg_body~load_uint(256);
        slice signature = in_msg_body~load_ref().begin_parse();
        int public_key = in_msg_body~load_uint(256);

        ;; ~dump(hash);
        ;; ~dump(signature);
        ;; ~dump(public_key);

        ;; call check_signature (-1 is valid / 0 is NOT valid)
        int valid = check_signature(hash, signature, public_key);

        ~dump(valid);

        slice owner_addr = data~load_msg_addr();
        int id = data~load_uint(32);
        int result = data~load_uint(32);
        slice tracker_contract_addr = data~load_msg_addr();

        ;; ~dump(result);
        ;; check the message was sgined by the owner
        ;; then check the message was signed by a specific account
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}


;;; Returns the fourth element of a tuple (with unknown element types).
forall X -> X fourth(tuple t) asm "3 INDEX";

;;; Updates the current value of `c3`. Usually, it is used for updating smart contract code in run-time.
;;; Note that after execution of this primitive the current code
;;; (and the stack of recursive function calls) won't change,
;;; but any other function call will use a function from the new code.
() set_c3(cont c) impure asm "c3 POP";



;; Get methods

;;; Generates a new pseudo-random integer z in the range 0..range−1 (or range..−1, if range < 0). More precisely, an unsigned random value x is generated as in random; then z := x * range / 2^256 is computed.


;;; Returns the first element of a triple tuple.
forall X, Y, Z -> X triple_first([X, Y, Z] p) asm "FIRST";

#include "imports/params.fc";

{- Prefix dictionary primitives -}

int equal_slice_bits(slice a, slice b) asm "SDEQ";

slice calculate_address_by_state_init(cell state_init) inline {
    return create_address(workchain(), cell_hash(state_init));
}

;;; Returns the depth of `cell` [c].
;;; If [c] has no references, then return `0`;
;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [c].
;;; If [c] is a `null` instead of a cell, returns zero.
int cell_depth(cell c) asm "CDEPTH";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    (
        int init?,
        int index,
        slice collection_address,
        slice lending_protocol_address,
        int activate_time,
        slice owner_address,
        cell content
    ) = load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        store_data(index, collection_address, lending_protocol_address, 0, in_msg_body~load_msg_addr(), in_msg_body~load_ref());
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
        transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, lending_protocol_address);
        return ();
    }
    if (op == op::get_static_data()) {
        send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }
    if (op == 3) { ;; burn
        throw_unless(401, equal_slices(sender_address, owner_address));
        owner_address = begin_cell().store_uint(0,2).end_cell().begin_parse();
        store_data(index, collection_address, lending_protocol_address, 0, owner_address, content);
        return ();
    }
    if (op == 4) { ;; activate
        throw_unless(401, equal_slices(sender_address, owner_address));
        throw_unless(410, activate_time == 0);  ;; only activate once
        store_data(index, collection_address, lending_protocol_address, now(), owner_address, content);
        return ();
    }
    if (op == 5) { ;; deactivate
        throw_unless(401, equal_slices(sender_address, owner_address));
        store_data(index, collection_address, lending_protocol_address, 0, owner_address, content);
        return ();
    }
    throw(0xffff);
}

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; collection owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}


(cell, int) udict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUREPLACE";

cell idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTISETB";

() recv_internal() { }

() msg::send_result(
    slice to_addr,
    int result,
    int opcode,
    int mode
) impure {
    ;; if we want to send a message, we first need to construct it
    ;; message serialization in most cases may be reduced to
    var msg = begin_cell()
                .store_uint(0x10, 6)                    ;; tech flags
                .store_slice(to_addr)                   ;; address to send message to
                .store_coins(0)                         ;; value of coins to send
                .store_uint(0, 107)                     ;; more tech flags :)
                .store_uint(opcode, 32)                 ;; call accumulate action in tracker
                .store_uint(0, 64)                      ;; query id 0
                .store_int(result, 32)                  ;; result to send
            .end_cell();

    ;; to send messages, use send_raw_message from the standard library.
    ;; it accepts two arguments message and mode
    send_raw_message(msg, mode);
}

int cell_null?(cell c) asm "ISNULL";


;;; Checks the Ed25519-`signature` of a `hash` (a 256-bit unsigned integer, usually computed as the hash of some data)
;;; using [public_key] (also represented by a 256-bit unsigned integer).
;;; The signature must contain at least 512 data bits; only the first 512 bits are used.
;;; The result is `−1` if the signature is valid, `0` otherwise.
;;; Note that `CHKSIGNU` creates a 256-bit slice with the hash and calls `CHKSIGNS`.
;;; That is, if [hash] is computed as the hash of some data, these data are hashed twice,
;;; the second hashing occurring inside `CHKSIGNS`.
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";

(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAXREF" "NULLSWAPIFNOT2";

() raw_reserve(int amount, int mode) impure asm "RAWRESERVE";

const error::insufficient_number_of_players = 106;


;;; Returns `(x, y, z, -1)` or `(null, null, null, 0)`.
;;; Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z`
;;; in the DAG rooted at `cell` [c], effectively returning the total storage used by this DAG taking into account
;;; the identification of equal cells.
;;; The values of `x`, `y`, and `z` are computed by a depth-first traversal of this DAG,
;;; with a hash table of visited cell hashes used to prevent visits of already-visited cells.
;;; The total count of visited cells `x` cannot exceed non-negative [max_cells];
;;; otherwise the computation is aborted before visiting the `(max_cells + 1)`-st cell and
;;; a zero flag is returned to indicate failure. If [c] is `null`, returns `x = y = z = 0`.
(int, int, int) compute_data_size(cell c, int max_cells) impure asm "CDATASIZE";

(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIADD";

int op::ownership_assigned() asm "0x05138d91 PUSHINT";

const error::access_denied = 102;


(int, int, slice, slice, int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address, lending_protocol_address) = (
        ds~load_uint(64),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, lending_protocol_address, ds~load_uint(64), ds~load_msg_addr(), ds~load_ref() );
    } else {
        return (0, index, collection_address, lending_protocol_address, 0, null(), null()); ;; nft not initialized yet
    }
}

(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN" "NULLSWAPIFNOT2";

{-
  # Address manipulation primitives
  The address manipulation primitives listed below serialize and deserialize values according to the following TL-B scheme:
  ```TL-B
  addr_none$00 = MsgAddressExt;
  addr_extern$01 len:(## 8) external_address:(bits len)
               = MsgAddressExt;
  anycast_info$_ depth:(#<= 30) { depth >= 1 }
    rewrite_pfx:(bits depth) = Anycast;
  addr_std$10 anycast:(Maybe Anycast)
    workchain_id:int8 address:bits256 = MsgAddressInt;
  addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
  _ _:MsgAddressInt = MsgAddress;
  _ _:MsgAddressExt = MsgAddress;

  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    src:MsgAddress dest:MsgAddressInt
    value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
  ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt
    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
  ```
  A deserialized `MsgAddress` is represented by a tuple `t` as follows:

  - `addr_none` is represented by `t = (0)`,
    i.e., a tuple containing exactly one integer equal to zero.
  - `addr_extern` is represented by `t = (1, s)`,
    where slice `s` contains the field `external_address`. In other words, `
    t` is a pair (a tuple consisting of two entries), containing an integer equal to one and slice `s`.
  - `addr_std` is represented by `t = (2, u, x, s)`,
    where `u` is either a `null` (if `anycast` is absent) or a slice `s'` containing `rewrite_pfx` (if anycast is present).
    Next, integer `x` is the `workchain_id`, and slice `s` contains the address.
  - `addr_var` is represented by `t = (3, u, x, s)`,
    where `u`, `x`, and `s` have the same meaning as for `addr_std`.
-}

;; NFTEditable

(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTISETGETOPTREF";

const op::invest = 0x165389ea;

#include "imports/utils.fc";


int builder_null?(builder b) asm "ISNULL";
