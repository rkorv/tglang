
(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUADDB";

#include "imports/stdlib.fc";


global slice owner_address;

int __test_multiplication_128() {
  return invoke_gas(mul, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125)]);
}

(cell, int, slice, int) idict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMAX" "NULLSWAPIFNOT2";

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}


(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

;; Send royalty parameters
() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}


(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAXREF" "NULLSWAPIFNOT2";

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams; ;; 1.2 %  --> factor = 12; base = 100;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;


(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";


;; =============== getters =============================


() save_data(slice owner_address, int counter) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(counter, 64)
    .end_cell());
}

;; Jettons


;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the nft_item_code
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

#include "imports/stdlib.fc";


;;; Returns the third element of a triple tuple.
forall X, Y, Z -> Z triple_third([X, Y, Z] p) asm "THIRD";


() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm "RAWRESERVEX";

global cell deposit_pool;

;;; Returns all but the last `0 ≤ len ≤ 1023` bits of `slice` [s].
slice skip_last_bits(slice s, int len) asm "SDSKIPLAST";
(slice, ()) ~skip_last_bits(slice s, int len) asm "SDSKIPLAST";

;;; Loads a dictionary as [load_dict], but returns only the remainder of the slice.
slice skip_dict(slice s) asm "SKIPDICT";

int op::transfer_editorship() asm "0x1c04412a PUSHINT";

int __test_addition_128() {
  return invoke_gas(add, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125)]);
}


(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMIN" "NULLSWAPIFNOT2";

;;; Similar to raw_reserve, but also accepts a dictionary extra_amount (represented by a cell or null) with extra currencies. In this way currencies other than TonCoin can be reserved.

;;; Returns the value of the global configuration parameter with integer index `i` as a `cell` or `null` value.

tuple digitize_number(int value)
  asm "NIL WHILE:<{ OVER }>DO<{ SWAP TEN DIVMOD s1 s2 XCHG TPUSH }> NIP";

cell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

int op::report_static_data() asm "0x8b771735 PUSHINT";

{-
  # Builder size primitives
-}

;;; Returns all but the last `0 ≤ len ≤ 1023` bits of `slice` [s].
slice skip_last_bits(slice s, int len) asm "SDSKIPLAST";
(slice, ()) ~skip_last_bits(slice s, int len) asm "SDSKIPLAST";

() recv_external(int balance, int msg_value, cell msg_full, slice in_msg) {
  if (balance < 10 * 1000 * 1000) { return (); }
  accept_message();

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_seed())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Seed: ")
    .store_number(digitize_number(get_seed()))
    .end_cell(), 0);

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_value())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Rand: ")
    .store_number(digitize_number(random()))
    .end_cell(), 0);
}



;;
;; Distributor contract splits any incoming value into between shareholders
;;

() raw_reserve(int amount, int mode) impure asm "RAWRESERVE";


;;
;; Distributor contract splits any incoming value into between shareholders
;;

;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)
;;; so that the current execution is considered “successful” with the saved values even if an exception
;;; in Computation Phase is thrown later.
() commit() impure asm "COMMIT";

;; NFT collection smart contract


;;; Appends a value `x` to a `Tuple t = (x1, ..., xn)`, but only if the resulting `Tuple t' = (x1, ..., xn, x)`
;;; is of length at most 255. Otherwise throws a type check exception.
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAXREF" "NULLSWAPIFNOT2";

() emit_log (int event_id, cell data, int query_id) impure inline {
    var msg = begin_cell()
        .store_uint(12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint(1, 2)          ;; addr_extern$01
        .store_uint(256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if(null?(data)) {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_uint(query_id, 64);
    } else {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_ref(data);
    }

    send_raw_message(msg.end_cell(), 0);
}


(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMIN" "NULLSWAPIFNOT2";

global cell ctx_shares;

(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETPREV" "NULLSWAPIFNOT2";

cell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGETOPTREF";


{-
// This function calculates the address of the treasury pool.
// The function returns the treasury pool address.
// The function takes the owner address, nft item address, and treasury pool code as parameters.
-}
slice calculate_treasury_pool_address(slice owner_address, slice nft_item_address, cell treasury_pool_code) inline {
    return calculate_treasury_pool_address_by_state(calculate_treasury_pool_state_init(owner_address, nft_item_address, treasury_pool_code));
}

;; Jettons

;;; Returns both the number of data bits and the number of references in `slice` [s].
(int, int) slice_bits_refs(slice s) asm "SBITREFS";

int __test_best_multiplication_128_mod_25519() {
  return invoke_gas(mul_mod_best, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), (1 << 255) + 19]);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      slice owner = in_msg_body~load_msg_addr();
      slice nexton =  in_msg_body~load_msg_addr();
      throw_unless(874, in_msg_body.slice_refs() == 1);
      throw_unless(873, in_msg_body.slice_bits() == 1);
      throw_unless(872, in_msg_body.preload_uint(1) == 1);
      ;;slice content = in_msg_body~load_ref().begin_parse();
      ;;throw_if(873, content.slice_bits() == 0);
      cell content_dict = in_msg_body~load_dict();
      ;;throw_if(873, content_dict.begin_parse().slice_refs() == 0);
      ;; cell raw_content = in_msg_body~load_ref();
      ;; slice rcs = raw_content.begin_parse();

      ;; cell name = rcs~load_ref();
      ;; slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      ;; cell content_dict = new_dict();
      ;; content_dict~udict_set(256, string_hash("name"), value);
      ;; cell desc = rcs~load_ref();
      ;; value = begin_cell().store_ref(desc).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("description"), value);
      ;; cell image = rcs~load_ref();
      ;; value = begin_cell().store_ref(image).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("image"), value);
      ;; int principal = rcs~load_coins();
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_coins(principal)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("principal"), value);
      ;; int leverageRatio = rcs~load_uint(8);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(leverageRatio, 8)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("leverage"), value);
      ;; int lockPeriod = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;           .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockPeriod, 256)
      ;;             .end_cell()
      ;;           )
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockPeriod"), value);
      ;; int lockEnd = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockEnd, 256)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockEnd"), value);

        throw_if(801, content_dict.dict_empty?());
        (slice nameCs, int success) = content_dict.idict_get?(257, string_hash("name"));
        throw_if(875, nameCs.null?());
        throw_unless(876, success == -1);
        int name = nameCs~load_uint(256);
        throw_if(867, name == "Item name"H);

        cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
        store_data(index, collection_address, owner, nexton, content);  ;; body is crafted in Nexton contract
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}



{-
// This function gets the deposit value of a user.
// It loads the deposit pool from the global state.
// It returns the deposit value of the user.
// The deposit pool is a dictionary of addresses (keys) to integers (values).
// The deposit value is an integer.
-}
int get_deposit_value(slice user) method_id {
    load_data();
    int deposit = dict_empty?(deposit_pool)? 0 : dict_get_slice_int(deposit_pool, 267, user, 257);
    return deposit ;
}


;; storage binary format is defined as TL-B in companion .tlb file


#include "imports/stdlib.fc";

;; Jettons

(int, slice, slice, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    var (treasury_admin_address, nft_item_address) = (ds~load_msg_addr(), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, treasury_admin_address, nft_item_address, ds~load_msg_addr(), ds~load_coins());
    } else {
        return (0, treasury_admin_address, nft_item_address, null(), 0); ;; pool not initialized yet
    }
}


int __test_six() {
  return 0xA;
}


() save_data() impure {
    set_data(begin_cell()
    .store_slice(owner_address)
    .store_dict(deposit_pool)
    .store_dict(loan_pool)
    .end_cell());
}


(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";

const msg::send_mode::ignore_errors = 2;

(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIADD";

;;; Sets current gas limit `gl` to the minimum of limit and `gm`, and resets the gas credit `gc` to zero.
;;; If the gas consumed so far (including the present instruction) exceeds the resulting value of `gl`,
;;; an (unhandled) out of gas exception is thrown before setting new gas limits.
;;; Notice that [set_gas_limit] with an argument `limit ≥ 2^63 − 1` is equivalent to [accept_message].

(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

{-
// this function adds the deposit amount to the balance
// it is used to increase the balance of an account
// sender is the account that is making the deposit
// deposit_amount is the amount of money that the account is depositing
// balance is the current balance of the account
-}
(int) deposit(slice sender, int deposit_amount, int balance) impure {
    throw_unless(500, deposit_amount >= 0);
    int new_balance = balance + deposit_amount;
    return new_balance;
}


{-
// Calculate the address of the Treasury Pool smart contract in the TON blockchain
// by the state of the smart contract.
// state_init - state of the Treasury Pool smart contract.
// return - address of the Treasury Pool smart contract in the TON blockchain.
-}
slice calculate_treasury_pool_address_by_state(cell state_init) inline {
    return begin_cell().store_uint(4, 3) ;; 0b100 = addr_std$10 tag; No anycast
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}


(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETNEXT" "NULLSWAPIFNOT2";

;;; Transforms a `slice` [s] into a simple ordinary continuation `c`, with `c.code = s` and an empty stack and savelist.
cont bless(slice s) impure asm "BLESS";

;;; Stores (Maybe ^Cell) to builder:
;;; if cell is null store 1 zero bit
;;; otherwise store 1 true bit and ref to cell
builder store_maybe_ref(builder b, cell c) asm(c b) "STOPTREF";

int op::excesses() asm "0xd53276db PUSHINT";

;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)
;;; so that the current execution is considered “successful” with the saved values even if an exception
;;; in Computation Phase is thrown later.
() commit() impure asm "COMMIT";

;;; Mixes unsigned 256-bit integer x into the random seed r by setting the random seed to sha256 of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed r, and the second with the big-endian representation of x.


;;; Checks whether [signature] is a valid Ed25519-signature of the data portion of `slice data` using `public_key`,
;;; similarly to [check_signature].
;;; If the bit length of [data] is not divisible by eight, throws a cell underflow exception.
;;; The verification of Ed25519 signatures is the standard one,
;;; with sha256 used to reduce [data] to the 256-bit number that is actually signed.
int check_data_signature(slice data, slice signature, int public_key) asm "CHKSIGNS";

(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUREPLACEB";

() raw_reserve(int amount, int mode) impure asm "RAWRESERVE";

;;; Loads a dictionary `D` (HashMapE) from `slice` [s].
;;; (returns `null` if `nothing` constructor is used).
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";

;;; Equivalent to randomize(cur_lt());.


{-
  # Signature checks
-}


{-
// This code loads the deposit pool from the storage and returns it.
// The deposit pool is used to calculate the total amount of money that
// has been deposited into the system.
-}
cell get_deposit_pool() method_id {
    load_data();
    return deposit_pool;
}

;;; Checks whether the data parts of two slices coinside

int op::transfer() asm "0x5fcc3d14 PUSHINT";

int workchain() asm "0 PUSHINT";


;; Get methods
{-
// this function gets the next item in the collection and returns
// the next item index, the item itself, the owner address, and the lending protocol address
-}
(int, cell, slice, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, lending_protocol_address) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address, lending_protocol_address);
}

global int ctx_result; ;; the result of the add operation

;;; Preloads a signed [len]-bit integer from a slice [s].
;; int preload_int(slice s, int len) asm "PLDIX";


() op_withdraw(int withdraw_amount, slice owner_address) impure {
  var [balance, _] = get_balance();
  throw_unless(error::insufficient_balance, balance >= withdraw_amount);
  int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
  send_grams(owner_address, return_value);
}

global slice sender;


;;; Returns the second element of a tuple (with unknown element types).
forall X -> X second(tuple t) asm "SECOND";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::accumulate) {
        int tracker = in_msg_body~load_uint(32);
        ctx_tracker += tracker;
        save_data();
        return ();
    }

    throw(0xffff);
}

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";


;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the nft_item_code
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";

;; storage binary format is defined as TL-B in companion .tlb file



;;; Moves a variable [x] to the top of the stack
forall X -> (X, ()) ~impure_touch(X x) impure asm "NOP";



() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(ctx_owner)
            .store_uint(ctx_id, 32)
            .store_uint(ctx_result, 32)
            .store_slice(ctx_tracker_contract_addr)
            .end_cell()
    );
}


() raw_reserve(int amount, int mode) impure asm "RAWRESERVE";

const msg::mode::carry_remaining_value = 64;

const op::start = 0x4349f57a;

(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMIN" "NULLSWAPIFNOT2";

;;; Preloads the first reference from the slice.
cell preload_ref(slice s) asm "PLDREF";


(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null()); ;; nft not initialized yet
    }
}



int equal_slices (slice a, slice b) asm "SDEQ";


const msg::send_mode::default = 0;
