
#include "imports/params.fc";


{-
  # Signature checks
-}

int mul_mod(int a, int b, int m) inline_ref {
  (_, int r) = muldivmod(a % m, b % m, m);
  return r;
}

;;; Computes the amount of gas that can be bought for `amount` nanoTONs,
;;; and sets `gl` accordingly in the same way as [set_gas_limit].
() buy_gas(int amount) impure asm "BUYGAS";

;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)
;;; so that the current execution is considered “successful” with the saved values even if an exception
;;; in Computation Phase is thrown later.
() commit() impure asm "COMMIT";

global int ctx_seed;

slice log_address_rand_seed()  asm "b{01} b{001101000} |+ x{0000000052414E443A53454544} |+ PUSHSLICE";
slice log_address_rand_value() asm "b{01} b{001110000} |+ x{0000000052414E443A56414C5545} |+ PUSHSLICE";

#include "imports/op-codes.fc";


;; message binary format is defined as TL-B in companion .tlb file

int op::editorship_assigned() asm "0x511a4463 PUSHINT";

(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTISET";


;;; Returns the third element of a triple tuple.
forall X, Y, Z -> Z triple_third([X, Y, Z] p) asm "THIRD";


#include "imports/params.fc";

int __test_better_modulo_multiplication_short() {
  return invoke_gas(mul_mod_better, [5, 3, 7]);
}

int op::get_royalty_params() asm "0x693d3950 PUSHINT";


() save_data(slice owner_address, int counter) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(counter, 64)
    .end_cell());
}

(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMAX" "NULLSWAPIFNOT2";

cell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";


;; =============== getters =============================

#include "imports/stdlib.fc";

(cell, slice, int, int, int) load_date() inline {
    slice ds = get_data().begin_parse();

    cell contributors = ds~load_ref().begin_parse().preload_dict();
    slice owner = ds~load_msg_addr();
    int percentage_payoff = ds~load_uint(8);
    int deadline = ds~load_uint();
    int total_pledge = ds~load_coins();

    return(contributors, owner, percentage_payoff, deadline, total_pledge);
}


{-
// This function parses a loan cell and returns its components.
// The components are:
// - The address of the investor
// - The address of the borrower
// - The amount of the loan
// - The amount that must be repaid
// - The time when the loan starts
// - The duration of the loan
// The function parameters are:
// - The loan cell
-}
(slice, slice, int, int, int, int) parse_loan(cell loan_cell) {
    slice loan = loan_cell.begin_parse();
    slice investor = loan~load_msg_addr();
    slice borrower = loan~load_msg_addr();
    int amount = loan~load_uint(120);
    int repay_amount = loan~load_uint(120);
    int start_time = loan~load_uint(64);
    int duration = loan~load_uint(64);
    return (investor, borrower, amount, repay_amount, start_time, duration);
}


() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, lending_protocol_address) = load_data();

    if (op == 1) { ;; deploy new nft
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        if (is_last) {
            deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), lending_protocol_address);
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, lending_protocol_address);
        }
        return ();
    }

    if (op == 3) { ;; change owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, lending_protocol_address);
        return ();
    }
    throw(0xffff);
}

;;; Preloads a signed [len]-bit integer from a slice [s].
;; int preload_int(slice s, int len) asm "PLDIX";

;;; Loads the first reference from the slice.
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}



;;; Appends a value `x` to a `Tuple t = (x1, ..., xn)`, but only if the resulting `Tuple t' = (x1, ..., xn, x)`
;;; is of length at most 255. Otherwise throws a type check exception.
forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

{-
  # Slice size primitives
-}

;;; Computes the amount of gas that can be bought for `amount` nanoTONs,
;;; and sets `gl` accordingly in the same way as [set_gas_limit].
() buy_gas(int amount) impure asm "BUYGAS";

const error::game_started = 104;

(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTIGETNEXT" "NULLSWAPIFNOT2";

const op::add = "op::add"c;

#include "imports/utils.fc";


(int, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();
    var (index, owner_address, pool_code) = (ds~load_uint(64), ds~load_msg_addr(), ds~load_ref()); ;; treasury_pool_code
    ds.end_parse();
    return (index, owner_address, pool_code);
}

global int ctx_result; ;; the result of the add operation

(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMIN" "NULLSWAPIFNOT2";

;;; Preloads (Maybe ^Cell) from `slice` [s].
cell preload_maybe_ref(slice s) asm "PLDOPTREF";


;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,
;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.
int string_hash(slice s) asm "SHA256U";

;;; Loads a dictionary `D` (HashMapE) from `slice` [s].
;;; (returns `null` if `nothing` constructor is used).
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";


;; Send royalty parameters
() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}


{-
// This function is used to get data from the nft cell.
// The function returns the data:
// init? - whether the cell is initialized
// index - index of the nft in the collection
// activate_time - time when the nft was activated
// collection_address - address of the collection
// owner_address - address of the owner
// content - the content of the nft
// lending_protocol_address - the address of the lending protocol
-}
(int, int, int, slice, slice, cell, slice) get_nft_data() method_id {
    (
        int init?,
        int index,
        slice collection_address,
        slice lending_protocol_address,
        int activate_time,
        slice owner_address,
        cell content
    ) = load_data();

    return (init?, index, activate_time, collection_address, owner_address, content, lending_protocol_address);
}



;;; Similar to [compute_data_size?], but accepting a `slice` [s] instead of a `cell`.
;;; The returned value of `x` does not take into account the cell that contains the `slice` [s] itself;
;;; however, the data bits and the cell references of [s] are accounted for in `y` and `z`.
(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm "SDATASIZE";


() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {

  ;; parse incoming internal message
  slice cs = in_msg.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  ;; handle bounced messages
  if (flags & 1) {
    return (); ;; ignore
  }

  ;; load from contract storage
  var (owner_address, player_counter, playing, charity_address) = load_data();

  ;; handle operations
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::register) {
    ;; empty since ton received (msg_value) is added automatically to contract balance
    ;; ~dump msg_value; ;; an example of debug output, requires running contract in debug mode
    throw_unless(error::insufficient_register_fee, msg_value == 1000000000);
    throw_unless(error::game_started, playing == 0);
    save_data(owner_address, player_counter + 1, 0, charity_address);
    return ();
  }

  if (op == op::start) {
    throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
    throw_unless(error::game_started, playing == 0);
    throw_unless(error::insufficient_number_of_players, player_counter > 1);
    save_data(owner_address, player_counter, 1, charity_address);
    return ();
  }

  if (op == op::invest) {
    ;; Takes ton from wallet and use it to automatically start a game
    ;; TODO mapping who invested and how much
    return ();
  }

  if (op == op::winner) {
    ;; whole donton balance is send to winner
    throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
    slice winner_address = in_msg_body~load_msg_addr();
    glory_to_winner(winner_address);
    save_data(owner_address, 0, 0, charity_address);
    return ();
  }

  if (op == op::transfer_ownership) {
    throw_unless(error::access_denied, equal_slices(sender_address, owner_address));
    slice new_owner_address = in_msg_body~load_msg_addr();
    save_data(new_owner_address, player_counter, playing, charity_address);
    return ();
  }

  throw(error::unknown_op);
}


;;
;;  GET Methods
;;


{- Prefix dictionary primitives -}


;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the nft_item_code
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

global int ctx_id;


() load_data() impure {
    slice ds = get_data().begin_parse();

    ctx_owner = ds~load_msg_addr();
    ctx_processing_price = ds~load_coins();
    ctx_shares = ds~load_dict();
    ctx_seed = ds~load_uint(16);

    ds.end_parse();
}

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}


int op::excesses() asm "0xd53276db PUSHINT";

(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETNEXT" "NULLSWAPIFNOT2";

{-
  # Builder primitives
  It is said that a primitive _stores_ a value `x` into a builder `b`
  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.
  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).

  All the primitives below first check whether there is enough space in the `builder`,
  and only then check the range of the value being serialized.
-}

int __test_better_multiplication_128_mod_25519() {
  return invoke_gas(mul_mod_better, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), (1 << 255) + 19]);
}


slice owner() method_id {
    load_data();
    return ctx_owner;
}

const msg::send_mode::destroy_if_zero = 32;

int op::report_static_data() asm "0x8b771735 PUSHINT";

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}


{---
  # Computation of boc size
  The primitives below may be useful for computing storage fees of user-provided data.
-}

int op::transfer_editorship() asm "0x1c04412a PUSHINT";


{-
// This function is used to get data from the nft cell.
// The function returns the data:
// init? - whether the cell is initialized
// index - index of the nft in the collection
// activate_time - time when the nft was activated
// collection_address - address of the collection
// owner_address - address of the owner
// content - the content of the nft
// lending_protocol_address - the address of the lending protocol
-}
(int, int, int, slice, slice, cell, slice) get_nft_data() method_id {
    (
        int init?,
        int index,
        slice collection_address,
        slice lending_protocol_address,
        int activate_time,
        slice owner_address,
        cell content
    ) = load_data();

    return (init?, index, activate_time, collection_address, owner_address, content, lending_protocol_address);
}



slice owner_address() method_id {
  var (owner_address, _, _, _) = load_data();
  return owner_address;
}

int op::get_royalty_params() asm "0x693d3950 PUSHINT";


;;; Returns the first element of a triple tuple.
forall X, Y, Z -> X triple_first([X, Y, Z] p) asm "FIRST";

const op::withdraw = 3;


(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null()); ;; nft not initialized yet
    }
}



int workchain() asm "0 PUSHINT";



const int error::not_an_oracle = 402;


;; Recreation functions

int op::editorship_assigned() asm "0x511a4463 PUSHINT";

;; Jettons

(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTSETB";

;;; Checks whether a `slice` [s] is empty (i.e., contains no bits of data and no cell references).
int slice_empty?(slice s) asm "SEMPTY";

(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";

;;; Stores (serializes) an integer [x] in the range `0..2^128 − 1` into `builder` [b].
;;; The serialization of [x] consists of a 4-bit unsigned big-endian integer `l`,
;;; which is the smallest integer `l ≥ 0`, such that `x < 2^8l`,
;;; followed by an `8l`-bit unsigned big-endian representation of [x].
;;; If [x] does not belong to the supported range, a range check exception is thrown.
;;;
;;; Store amounts of TonCoins to the builder as VarUInteger 16
builder store_grams(builder b, int x) asm "STGRAMS";
builder store_coins(builder b, int x) asm "STGRAMS";

int workchain() asm "0 PUSHINT";

int __test_better_modulo_multiplication_short() {
  return invoke_gas(mul_mod_better, [5, 3, 7]);
}

;;; Loads serialized amount of TonCoins (any unsigned integer up to `2^128 - 1`).
(slice, int) load_grams(slice s) asm( -> 1 0) "LDGRAMS";
(slice, int) load_coins(slice s) asm( -> 1 0) "LDGRAMS";

#include "imports/nft_op_codes.fc";

int get_seed() impure asm "RANDSEED";

;; Jettons minter


builder store_body_header(builder b, int op, int query_id) inline {
    return b.store_uint(op, 32)
          .store_uint(query_id, 64);
}

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; collection owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}


#include "imports/stdlib.fc";

int op::edit_content() asm "0x1a0b9d51 PUSHINT";

int __test_addition_128() {
  return invoke_gas(add, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125)]);
}


(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUADDB";

() emit_log (int event_id, cell data, int query_id) impure inline {
    var msg = begin_cell()
        .store_uint(12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint(1, 2)          ;; addr_extern$01
        .store_uint(256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if(null?(data)) {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_uint(query_id, 64);
    } else {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
                 .store_ref(data);
    }

    send_raw_message(msg.end_cell(), 0);
}


(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMIN" "NULLSWAPIFNOT2";

{-
  # Persistent storage save and load
-}


int mul_mod_best(int a, int b, int m) asm "x{A988} s,";



{-
// this function adds the deposit amount to the balance
// it is used to increase the balance of an account
// sender is the account that is making the deposit
// deposit_amount is the amount of money that the account is depositing
// balance is the current balance of the account
-}
(int) deposit(slice sender, int deposit_amount, int balance) impure {
    throw_unless(500, deposit_amount >= 0);
    int new_balance = balance + deposit_amount;
    return new_balance;
}



;; NFTEditable

{-
// Calculate the address of the Treasury Pool smart contract in the TON blockchain
// by the state of the smart contract.
// state_init - state of the Treasury Pool smart contract.
// return - address of the Treasury Pool smart contract in the TON blockchain.
-}
slice calculate_treasury_pool_address_by_state(cell state_init) inline {
    return begin_cell().store_uint(4, 3) ;; 0b100 = addr_std$10 tag; No anycast
            .store_int(workchain(), 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}


() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm "RAWRESERVEX";

;; NFT collection smart contract

const op::accumulate = "op::accumulate"c;  ;; tracker op code

#include "imports/stdlib.fc";

;; storage variables

cell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";

(cell, slice, int) idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIDELGET" "NULLSWAPIFNOT";

;;; Preloads (Maybe ^Cell) from `slice` [s].
cell preload_maybe_ref(slice s) asm "PLDOPTREF";
