

;;; Creates a tuple of length four with given arguments as elements.
forall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm "4 TUPLE";


{-
// This function creates a new treasury pool, which is a contract that allows users to send tokens to the pool, and receive tokens from the pool in exchange.
// The pool code is the code of the contract that will be deployed to the address of the pool.
// The send amount is the amount of nanograms of the pool currency that will be sent to the pool.
// The pool content is the initial state of the pool. It must contain a public key, and the pool address. In addition, it may contain any other data that the pool code requires.
-}
() create_pool(slice nft_item_address, cell pool_code, int send_amount, cell pool_content) impure {
    cell state_init = calculate_treasury_pool_state_init(my_address(), nft_item_address, pool_code);
    slice pool_address = calculate_treasury_pool_address_by_state(state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(pool_address)
            .store_coins(send_amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(pool_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}


int op::transfer_notification() asm "0x7362d09c PUSHINT";

const error::insufficient_balance = 103;


;;; Returns the balance of the smart contract as a tuple consisting of an int
;;; (balance in nanotoncoins) and a `cell`
;;; (a dictionary with 32-bit keys representing the balance of "extra currencies")
;;; at the start of Computation Phase.
;;; Note that RAW primitives such as [send_raw_message] do not update this field.
[int, cell] get_balance() asm "BALANCE";


;;; Returns the starting logical time of the current block.
int block_lt() asm "BLOCKLT";

cell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) "DICTSET";


;;; Returns the tail of lisp-style list.
tuple cdr(tuple list) asm "CDR";


;;; Unpacks a tuple of length one
forall X -> X unsingle([X] t) asm "UNSINGLE";

int op::editorship_assigned() asm "0x511a4463 PUSHINT";

int op::get_royalty_params() asm "0x693d3950 PUSHINT";

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}


() recv_external(int balance, int msg_value, cell msg_full, slice in_msg) {
  if (balance < 10 * 1000 * 1000) { return (); }
  accept_message();

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_seed())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Seed: ")
    .store_number(digitize_number(get_seed()))
    .end_cell(), 0);

  send_raw_message(begin_cell()
    .store_uint(0xC, 4)
    .store_slice(log_address_rand_value())
    .store_uint(0, 96 + 2 + 32)
    .store_slice("Rand: ")
    .store_number(digitize_number(random()))
    .end_cell(), 0);
}



() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages, bitwise "and"
		  return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 1) { ;; deploy new nft
      int item_index = in_msg_body~load_uint(64);
      throw_unless(402, item_index <= next_item_index);
      var is_last = item_index == next_item_index;
      deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());  ;; gets the value to be sent with item deploy and the body
      if (is_last) {
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
      }
      return ();
    }
    if (op == 2) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          throw_unless(403 + counter, item_index <= next_item_index);
          deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
          if (item_index == next_item_index) {
            next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
      return ();
    }
    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
      return ();
    }
    throw(0xffff);
}

(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTISET";

(cell, int) idict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIADDB";

{-
  # Slice size primitives
-}

;; State Init
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


#include "imports/stdlib.fc";

;; Standard library for funC
;;

(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTREMMAX" "NULLSWAPIFNOT2";

const op::add = "op::add"c;

;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";

;; operations (constant values taken from crc32 on op message in the companion .tlb files and appear during build)

slice log_address_rand_seed()  asm "b{01} b{001101000} |+ x{0000000052414E443A53454544} |+ PUSHSLICE";
slice log_address_rand_value() asm "b{01} b{001110000} |+ x{0000000052414E443A56414C5545} |+ PUSHSLICE";


(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

;;; Returns the last `0 ≤ len ≤ 1023` bits of `slice` [s].
slice slice_last(slice s, int len) asm "SDCUTLAST";

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; collection owner_address, slice
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}


;;; Returns both the number of data bits and the number of references in `slice` [s].
(int, int) slice_bits_refs(slice s) asm "SBITREFS";

const error::insufficient_number_of_players = 106;


;;; Creates tuple with zero elements.
tuple empty_tuple() asm "NIL";

;; NFTEditable
int op::edit_content() asm "0x1a0b9d51 PUSHINT";
int op::transfer_editorship() asm "0x1c04412a PUSHINT";
int op::editorship_assigned() asm "0x511a4463 PUSHINT";


() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);


  send_raw_message(msg.end_cell(), send_mode);
}


#include "imports/stdlib.fc";


() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, slice lending_protocol_address) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code, lending_protocol_address);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

;;; Updates the current value of `c3`. Usually, it is used for updating smart contract code in run-time.
;;; Note that after execution of this primitive the current code
;;; (and the stack of recursive function calls) won't change,
;;; but any other function call will use a function from the new code.
() set_c3(cont c) impure asm "c3 POP";


const msg::send_mode::ignore_errors = 2;

() randomize_lt() impure asm "LTIME" "ADDRAND";

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams; ;; 1.2 %  --> factor = 12; base = 100;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;


int op::editorship_assigned() asm "0x511a4463 PUSHINT";

global cell loan_pool;


(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, cell content) = load_data();
  return (init?, index, collection_address, owner_address, content);
}

;;; Preloads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.
;; slice preload_bits(slice s, int len) asm "PLDSLICEX";

int op::transfer_editorship() asm "0x1c04412a PUSHINT";


{-
// This function withdraw the amount of tokens into the withdrawer's address.
// Parameters: withdrawer - the address of the user who is withdrawer the tokens
//             amount - the amount of tokens that the user is withdrawing
// Returns: nothing
// Throws: 400 if insufficient funds
-}
() withdraw(slice receiver, slice withdrawer, int withdraw_amount) impure {
    int deposit = null?(deposit_pool)? 0 : dict_get_slice_int(deposit_pool, 267, depositor, 257);
    throw_unless(400, withdraw_amount <= deposit );
    var msg = begin_cell()
    .store_uint(0x18, 6) ;; 0b011000 int_msg_info, instant hypercube routing, bounceable message, message is not the result of bouncing itself, addr_none(self)
    .store_slice(receiver)
    .store_coins(withdraw_amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; see more detail in message scheme
    .end_cell();
    send_raw_message(msg, 0);
    int remain = deposit - withdraw_amount ;
    (deposit_pool, _) = dict_set_slice_int(deposit_pool, 267, depositor, remain, 257);
    save_data();
}

;;; Stores a reference to `cell` [c] into `builder` [b].
builder store_ref(builder b, cell c) asm(c b) "STREF";

const msg::mode::carry_remaining_balace = 128;


;;; Returns the current Unix time as an Integer
int now() asm "NOW";

int mul(int a, int b) asm "MUL";


;; State Init
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}



;;; Returns the head of lisp-style list.
forall X -> X car(tuple list) asm "CAR";

;;; Loads a signed [len]-bit integer from a slice [s].
;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";

(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) "PFXDICTDEL";

(int, int, slice, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null(), null()); ;; nft not initialized yet
    }
}



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::accumulate) {
        int tracker = in_msg_body~load_uint(32);
        ctx_tracker += tracker;
        save_data();
        return ();
    }

    throw(0xffff);
}

(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) "PFXDICTSET";

(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

int __test_modulo_multiplication_short() {
  return invoke_gas(mul_mod, [5, 3, 7]);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      slice owner = in_msg_body~load_msg_addr();
      slice nexton =  in_msg_body~load_msg_addr();
      throw_unless(874, in_msg_body.slice_refs() == 1);
      throw_unless(873, in_msg_body.slice_bits() == 1);
      throw_unless(872, in_msg_body.preload_uint(1) == 1);
      ;;slice content = in_msg_body~load_ref().begin_parse();
      ;;throw_if(873, content.slice_bits() == 0);
      cell content_dict = in_msg_body~load_dict();
      ;;throw_if(873, content_dict.begin_parse().slice_refs() == 0);
      ;; cell raw_content = in_msg_body~load_ref();
      ;; slice rcs = raw_content.begin_parse();

      ;; cell name = rcs~load_ref();
      ;; slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      ;; cell content_dict = new_dict();
      ;; content_dict~udict_set(256, string_hash("name"), value);
      ;; cell desc = rcs~load_ref();
      ;; value = begin_cell().store_ref(desc).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("description"), value);
      ;; cell image = rcs~load_ref();
      ;; value = begin_cell().store_ref(image).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("image"), value);
      ;; int principal = rcs~load_coins();
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_coins(principal)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("principal"), value);
      ;; int leverageRatio = rcs~load_uint(8);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(leverageRatio, 8)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("leverage"), value);
      ;; int lockPeriod = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;           .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockPeriod, 256)
      ;;             .end_cell()
      ;;           )
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockPeriod"), value);
      ;; int lockEnd = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockEnd, 256)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockEnd"), value);

        throw_if(801, content_dict.dict_empty?());
        (slice nameCs, int success) = content_dict.idict_get?(257, string_hash("name"));
        throw_if(875, nameCs.null?());
        throw_unless(876, success == -1);
        int name = nameCs~load_uint(256);
        throw_if(867, name == "Item name"H);

        cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
        store_data(index, collection_address, owner, nexton, content);  ;; body is crafted in Nexton contract
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}



;;; Creates tuple with zero elements.
tuple empty_tuple() asm "NIL";


{---
  # Gas related primitives
-}


(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMIN" "NULLSWAPIFNOT2";


{-
// This code packs the treasury pool data into a cell
// owner_address: the address of the owner of the NFT item
// nft_item_address: the address of the NFT item
// returns: a cell containing the packed treasury pool data
-}
cell pack_treasury_pool_data(slice owner_address, slice nft_item_address) inline {
    return begin_cell()
            .store_slice(owner_address)
            .store_slice(nft_item_address)
            .end_cell();
}


(int) get_tracker() method_id {
    load_data();
    return ctx_tracker;
}



{-
// This function starts a loan. It is called by the borrower.
// The borrower sends the amount of the loan as a message value.
// The loan is stored in the loan_pool dictionary, indexed by the item being loaned.
// The borrower is the address of the sender of the message.
// The lender is the address of the sender of the loan message.
// The loan amount is the amount of the message value.
// The repay amount is the amount of the message value.
// The start time is the current time.
// The duration is the duration of the loan, in seconds.
// The borrower sends the item being loaned to the lender.
-}
() start_loan(slice in_msg_body) impure {
    slice investor = in_msg_body~load_msg_addr();
    slice item = in_msg_body~load_msg_addr();
    int amount = in_msg_body~load_uint(120);
    int repay_amount = in_msg_body~load_uint(120);
    int duration = in_msg_body~load_uint(64);

    var (loan_cell, ok) = dict_get_ref(loan_pool, 267, item);
    throw_unless(409, null?(loan_cell));

    transfer_bond(sender ,my_address() ,item);
    withdraw(sender, investor, amount);

    cell loan = begin_cell()
    .store_slice(investor)
    .store_slice(sender)
    .store_uint(amount, 120)
    .store_uint(repay_amount, 120)
    .store_uint(now(), 64)
    .store_uint(duration, 64)
    .end_cell();
    (loan_pool, _) = dict_set_ref(loan_pool ,267 ,item ,loan);
    save_data();
}


int min_tons_for_storage() asm "30000000 PUSHINT"; ;; 0.03 TON

;;; Creates a new empty `builder`.
builder begin_cell() asm "NEWC";


;; NFTEditable

int op::claim_rewards() asm "0x636c6169 PUSHINT";

;;; Preloads an unsigned [len]-bit integer from a slice [s].
;; int preload_uint(slice s, int len) asm "PLDUX";


;;; Extracts the head and the tail of lisp-style list.
forall X -> (X, tuple) uncons(tuple list) asm "UNCONS";

int mul_mod_better(int a, int b, int m) inline_ref {
  (_, int r) = muldivmod(a, b, m);
  return r;
}

const msg::mode::destroy_if_zero = 32;

int workchain() asm "0 PUSHINT";

(int, int, slice, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null(), null()); ;; nft not initialized yet
    }
}


cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
            .store_coins(balance)
            .store_slice(owner_address)
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell();
}


() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}


(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTSETB";

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";

int __test_best_multiplication_128_mod_16() {
  return invoke_gas(mul_mod_best, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), 65535]);
}


;;; Returns the third element of a tuple (with unknown element types).
forall X -> X third(tuple t) asm "THIRD";

int op::transfer_notification() asm "0x7362d09c PUSHINT";

cell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGETOPTREF";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    var (index, owner_address, pool_code) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 1) { ;; handle op::create_pool
        var (nft_item_address, amount, content) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_ref());
        create_pool(nft_item_address, pool_code, amount, content);
        save_data(index, owner_address, pool_code);
        return ();
    }

    throw(0xffff);
}


int op::claim_rewards() asm "0x636c6169 PUSHINT";

int op::report_static_data() asm "0x8b771735 PUSHINT";

const op::register = 0x4dcbb5a8;

(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMAXREF" "NULLSWAPIFNOT2";

{-
  # Builder size primitives
-}

() randomize_lt() impure asm "LTIME" "ADDRAND";


{-
// transfer_bond - transfer bond from sender to receiver.
// responser - address of the responser.
// receiver - address of the receiver.
// item - the item of the bond.
-}
() transfer_bond(slice responser, slice receiver, slice item) impure {
    var msg = begin_cell()
     .store_uint(0x18, 6)
     .store_slice(item)
     .store_coins(min_tons_for_storage())
     .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
     .store_ref(
        begin_cell()
         .store_uint(0x5fcc3d14, 32)
         .store_uint(0, 64)
         .store_slice(receiver)
         .store_slice(responser)
         .store_uint(0, 1)
         .store_coins(0)
         .store_ref(begin_cell().end_cell())
        .end_cell()
    )
     .end_cell();
    send_raw_message(msg, 0);
}

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; collection owner_address, slice
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}


(int, slice, slice, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    var (treasury_admin_address, nft_item_address) = (ds~load_msg_addr(), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, treasury_admin_address, nft_item_address, ds~load_msg_addr(), ds~load_coins());
    } else {
        return (0, treasury_admin_address, nft_item_address, null(), 0); ;; pool not initialized yet
    }
}



{-
// This function gets the deposit value of a user.
// It loads the deposit pool from the global state.
// It returns the deposit value of the user.
// The deposit pool is a dictionary of addresses (keys) to integers (values).
// The deposit value is an integer.
-}
int get_deposit_value(slice user) method_id {
    load_data();
    int deposit = dict_empty?(deposit_pool)? 0 : dict_get_slice_int(deposit_pool, 267, user, 257);
    return deposit ;
}


;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;


(int, int, slice, slice, int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address, lending_protocol_address) = (
        ds~load_uint(64),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, lending_protocol_address, ds~load_uint(64), ds~load_msg_addr(), ds~load_ref() );
    } else {
        return (0, index, collection_address, lending_protocol_address, 0, null(), null()); ;; nft not initialized yet
    }
}

const msg::send_mode::destroy_if_zero = 32;

(cell, int) idict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGETREF" "NULLSWAPIFNOT";

(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAX" "NULLSWAPIFNOT2";

const op::check_signature = "op::check_signature"c;

