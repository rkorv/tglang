
const msg::mode::separate_gas = 1;

(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETPREV" "NULLSWAPIFNOT2";

#include "treasury_utils.fc";

;;; Returns all but the last `0 ≤ len ≤ 1023` bits of `slice` [s].
slice skip_last_bits(slice s, int len) asm "SDSKIPLAST";
(slice, ()) ~skip_last_bits(slice s, int len) asm "SDSKIPLAST";

int __test_multiplication_128_mod_16() {
  return invoke_gas(mul_mod, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), 65535]);
}

{-
  # Slice size primitives
-}

const msg::send_mode::ignore_errors = 2;

(cell, int) idict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTIREPLACE";


;; =============== getters =============================

int op::report_static_data() asm "0x8b771735 PUSHINT";

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams; ;; 1.2 %  --> factor = 12; base = 100;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;


(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUADDB";


;; =============== getters =============================

;;; Stores dictionary `D` represented by `cell` [c] or `null` into `builder` [b].
;;; In other words, stores a `1`-bit and a reference to [c] if [c] is not `null` and `0`-bit otherwise.
builder store_dict(builder b, cell c) asm(c b) "STDICT";


() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_tracker, 32)
            .end_cell()
    );
}

int op::editorship_assigned() asm "0x511a4463 PUSHINT";

;;; Equivalent to randomize(cur_lt());.

(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIDEL";

#include "imports/stdlib.fc";


(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
      return (0, index, collection_address, null(), null()); ;; nft not initialized yet
    }
}



(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) "DICTSETB";

;;; Sets current gas limit `gl` to the minimum of limit and `gm`, and resets the gas credit `gc` to zero.
;;; If the gas consumed so far (including the present instruction) exceeds the resulting value of `gl`,
;;; an (unhandled) out of gas exception is thrown before setting new gas limits.
;;; Notice that [set_gas_limit] with an argument `limit ≥ 2^63 − 1` is equivalent to [accept_message].


;; Item Address
slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

;;; Decomposes slice [s] containing a valid `MsgAddress` into a `tuple t` with separate fields of this `MsgAddress`.
;;; If [s] is not a valid `MsgAddress`, a cell deserialization exception is thrown.
tuple parse_addr(slice s) asm "PARSEMSGADDR";


;;; Extracts the tail and the head of lisp-style list.
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";

int __test_addition_short() {
  return invoke_gas(add, [5, 3]);
}

(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTISETB";

(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMAXREF" "NULLSWAPIFNOT2";


{-
  # Signature checks
-}

() force_chain(slice addr) impure {
      (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == workchain());
}


int get_result() method_id {
    load_data();
    return ctx_result;
}


int equal_slices(slice a, slice b) asm "SDEQ";


int __test_modulo_multiplication_short() {
  return invoke_gas(mul_mod, [5, 3, 7]);
}

const msg::send_mode::carry_remaining_value = 64;

{-
  # Address manipulation primitives
  The address manipulation primitives listed below serialize and deserialize values according to the following TL-B scheme:
  ```TL-B
  addr_none$00 = MsgAddressExt;
  addr_extern$01 len:(## 8) external_address:(bits len)
               = MsgAddressExt;
  anycast_info$_ depth:(#<= 30) { depth >= 1 }
    rewrite_pfx:(bits depth) = Anycast;
  addr_std$10 anycast:(Maybe Anycast)
    workchain_id:int8 address:bits256 = MsgAddressInt;
  addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
  _ _:MsgAddressInt = MsgAddress;
  _ _:MsgAddressExt = MsgAddress;

  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    src:MsgAddress dest:MsgAddressInt
    value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
  ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt
    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;
  ```
  A deserialized `MsgAddress` is represented by a tuple `t` as follows:

  - `addr_none` is represented by `t = (0)`,
    i.e., a tuple containing exactly one integer equal to zero.
  - `addr_extern` is represented by `t = (1, s)`,
    where slice `s` contains the field `external_address`. In other words, `
    t` is a pair (a tuple consisting of two entries), containing an integer equal to one and slice `s`.
  - `addr_std` is represented by `t = (2, u, x, s)`,
    where `u` is either a `null` (if `anycast` is absent) or a slice `s'` containing `rewrite_pfx` (if anycast is present).
    Next, integer `x` is the `workchain_id`, and slice `s` contains the address.
  - `addr_var` is represented by `t = (3, u, x, s)`,
    where `u`, `x`, and `s` have the same meaning as for `addr_std`.
-}

(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTIREPLACEB";


int min_tons_for_storage() asm "30000000 PUSHINT"; ;; 0.03 TON


global cell loan_pool;

(int, slice, int) idict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTIGETPREV" "NULLSWAPIFNOT2";

(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUREPLACEB";

#pragma version >=0.2.0;

;;; Returns the number of references in `slice` [s].
int slice_refs(slice s) asm "SREFS";

(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

int op::report_static_data() asm "0x8b771735 PUSHINT";

int op::burn_notification() asm "0x7bdd97de PUSHINT";


;;; Returns the current Unix time as an Integer
int now() asm "NOW";


#include "imports/stdlib.fc";

(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMIN" "NULLSWAPIFNOT2";

() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

;;; Stores dictionary `D` represented by `cell` [c] or `null` into `builder` [b].
;;; In other words, stores a `1`-bit and a reference to [c] if [c] is not `null` and `0`-bit otherwise.
builder store_dict(builder b, cell c) asm(c b) "STDICT";

(int, slice, int) udict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTUGETPREVEQ" "NULLSWAPIFNOT2";

const op::winner = 0x586578f4;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      slice owner = in_msg_body~load_msg_addr();
      slice nexton =  in_msg_body~load_msg_addr();
      throw_unless(874, in_msg_body.slice_refs() == 1);
      throw_unless(873, in_msg_body.slice_bits() == 1);
      throw_unless(872, in_msg_body.preload_uint(1) == 1);
      ;;slice content = in_msg_body~load_ref().begin_parse();
      ;;throw_if(873, content.slice_bits() == 0);
      cell content_dict = in_msg_body~load_dict();
      ;;throw_if(873, content_dict.begin_parse().slice_refs() == 0);
      ;; cell raw_content = in_msg_body~load_ref();
      ;; slice rcs = raw_content.begin_parse();

      ;; cell name = rcs~load_ref();
      ;; slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      ;; cell content_dict = new_dict();
      ;; content_dict~udict_set(256, string_hash("name"), value);
      ;; cell desc = rcs~load_ref();
      ;; value = begin_cell().store_ref(desc).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("description"), value);
      ;; cell image = rcs~load_ref();
      ;; value = begin_cell().store_ref(image).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("image"), value);
      ;; int principal = rcs~load_coins();
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_coins(principal)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("principal"), value);
      ;; int leverageRatio = rcs~load_uint(8);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(leverageRatio, 8)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("leverage"), value);
      ;; int lockPeriod = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;           .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockPeriod, 256)
      ;;             .end_cell()
      ;;           )
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockPeriod"), value);
      ;; int lockEnd = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockEnd, 256)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockEnd"), value);

        throw_if(801, content_dict.dict_empty?());
        (slice nameCs, int success) = content_dict.idict_get?(257, string_hash("name"));
        throw_if(875, nameCs.null?());
        throw_unless(876, success == -1);
        int name = nameCs~load_uint(256);
        throw_if(867, name == "Item name"H);

        cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
        store_data(index, collection_address, owner, nexton, content);  ;; body is crafted in Nexton contract
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}


;;; Preloads an unsigned [len]-bit integer from a slice [s].
;; int preload_uint(slice s, int len) asm "PLDUX";

;;; Sets the value associated with [key_len]-bit key signed index in dictionary [dict] to [value] (cell),
;;; and returns the resulting dictionary.

const op::add = "op::add"c;

{-
  # Builder primitives
  It is said that a primitive _stores_ a value `x` into a builder `b`
  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.
  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).

  All the primitives below first check whether there is enough space in the `builder`,
  and only then check the range of the value being serialized.
-}

(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIDEL";


() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

{-
  # Builder size primitives
-}


;;; Extracts the head and the tail of lisp-style list.
forall X -> (X, tuple) uncons(tuple list) asm "UNCONS";


slice owner_address() method_id {
  var (owner_address, _) = load_data();
  return owner_address;
}

const error::game_started = 104;

;;; Sets the random seed to unsigned 256-bit seed.

cell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";


int add(int a, int b) asm "ADD";

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
                     .store_int(workchain(), 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}


int op::get_royalty_params() asm "0x693d3950 PUSHINT";

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

{- Prefix dictionary primitives -}


{-
  # Signature checks
-}

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; collection owner_address, slice
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}



() op_withdraw(int withdraw_amount, slice owner_address) impure {
  var [balance, _] = get_balance();
  throw_unless(error::insufficient_balance, balance >= withdraw_amount);
  int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
  send_grams(owner_address, return_value);
}

int op::transfer() asm "0x5fcc3d14 PUSHINT";

(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTREMMAX" "NULLSWAPIFNOT2";

;;; Preloads a signed [len]-bit integer from a slice [s].
;; int preload_int(slice s, int len) asm "PLDIX";

int __test_better_multiplication_128_mod_16() {
  return invoke_gas(mul_mod_better, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), 65535]);
}

(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUADD";


;;; Push null element (casted to given type)
;;; By the TVM type `Null` FunC represents absence of a value of some atomic type.
;;; So `null` can actually have any atomic type.
forall X -> X null() asm "PUSHNULL";

(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    var (index, owner_address, pool_code) = load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 1) { ;; handle op::create_pool
        var (nft_item_address, amount, content) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_ref());
        create_pool(nft_item_address, pool_code, amount, content);
        save_data(index, owner_address, pool_code);
        return ();
    }

    throw(0xffff);
}


cell config() method_id {
    return get_data();
}

;; Recreation functions



;; =============== messages =============================


global slice ctx_owner;

#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions

global cell ctx_shares;


(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

;;; Creates an output action that would change this smart contract code to that given by cell new_code. Notice that this change will take effect only after the successful termination of the current run of the smart contract

int __test_best_multiplication_128_mod_25519() {
  return invoke_gas(mul_mod_best, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), (1 << 255) + 19]);
}

(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTISET";


int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}


;; =============== messages =============================


(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

const int error::not_an_admin = 403;

;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";

int get_seed() impure asm "RANDSEED";


;;; Returns the fourth element of a tuple (with unknown element types).
forall X -> X fourth(tuple t) asm "3 INDEX";

int __test_better_modulo_multiplication_short() {
  return invoke_gas(mul_mod_better, [5, 3, 7]);
}


{-
// This function loads the loan pool from the storage.
// The loan pool is a global variable that is used
// by all functions in this file.
-}
cell get_loan_pool() method_id {
    load_data();
    return loan_pool;
}
