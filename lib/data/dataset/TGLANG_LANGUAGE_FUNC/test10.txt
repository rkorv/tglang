
;;; Mixes unsigned 256-bit integer x into the random seed r by setting the random seed to sha256 of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed r, and the second with the big-endian representation of x.


;;; Computes the hash of a `slice s` and returns it as a 256-bit unsigned integer `x`.
;;; The result is the same as if an ordinary cell containing only data and references from `s` had been created
;;; and its hash computed by [cell_hash].
int slice_hash(slice s) asm "HASHSU";

(cell, (int, slice, int)) ~idict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTIREMMAX" "NULLSWAPIFNOT2";


() save_data(slice owner_address, int player_counter, int playing, slice charity_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(player_counter, 64)
    .store_uint(playing, 64)
    .store_slice(charity_address)
    .end_cell()
  );
}

int op::ownership_assigned() asm "0x05138d91 PUSHINT";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      slice owner = in_msg_body~load_msg_addr();
      slice nexton =  in_msg_body~load_msg_addr();
      throw_unless(874, in_msg_body.slice_refs() == 1);
      throw_unless(873, in_msg_body.slice_bits() == 1);
      throw_unless(872, in_msg_body.preload_uint(1) == 1);
      ;;slice content = in_msg_body~load_ref().begin_parse();
      ;;throw_if(873, content.slice_bits() == 0);
      cell content_dict = in_msg_body~load_dict();
      ;;throw_if(873, content_dict.begin_parse().slice_refs() == 0);
      ;; cell raw_content = in_msg_body~load_ref();
      ;; slice rcs = raw_content.begin_parse();

      ;; cell name = rcs~load_ref();
      ;; slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      ;; cell content_dict = new_dict();
      ;; content_dict~udict_set(256, string_hash("name"), value);
      ;; cell desc = rcs~load_ref();
      ;; value = begin_cell().store_ref(desc).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("description"), value);
      ;; cell image = rcs~load_ref();
      ;; value = begin_cell().store_ref(image).end_cell().begin_parse();
      ;; content_dict~udict_set(256, string_hash("image"), value);
      ;; int principal = rcs~load_coins();
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_coins(principal)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("principal"), value);
      ;; int leverageRatio = rcs~load_uint(8);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(leverageRatio, 8)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("leverage"), value);
      ;; int lockPeriod = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;           .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockPeriod, 256)
      ;;             .end_cell()
      ;;           )
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockPeriod"), value);
      ;; int lockEnd = rcs~load_uint(256);
      ;; value = begin_cell()
      ;;         .store_ref(
      ;;             begin_cell()
      ;;             .store_uint(lockEnd, 256)
      ;;             .end_cell())
      ;;         .end_cell()
      ;;         .begin_parse();
      ;; content_dict~udict_set(256, string_hash("lockEnd"), value);

        throw_if(801, content_dict.dict_empty?());
        (slice nameCs, int success) = content_dict.idict_get?(257, string_hash("name"));
        throw_if(875, nameCs.null?());
        throw_unless(876, success == -1);
        int name = nameCs~load_uint(256);
        throw_if(867, name == "Item name"H);

        cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
        store_data(index, collection_address, owner, nexton, content);  ;; body is crafted in Nexton contract
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}



;; Item Address
slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

global slice sender;

;;; Returns the first `0 ≤ len ≤ 1023` bits of `slice` [s].
slice first_bits(slice s, int len) asm "SDCUTFIRST";


;; storage variables


{-
// transfer_bond - transfer bond from sender to receiver.
// responser - address of the responser.
// receiver - address of the receiver.
// item - the item of the bond.
-}
() transfer_bond(slice responser, slice receiver, slice item) impure {
    var msg = begin_cell()
     .store_uint(0x18, 6)
     .store_slice(item)
     .store_coins(min_tons_for_storage())
     .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
     .store_ref(
        begin_cell()
         .store_uint(0x5fcc3d14, 32)
         .store_uint(0, 64)
         .store_slice(receiver)
         .store_slice(responser)
         .store_uint(0, 1)
         .store_coins(0)
         .store_ref(begin_cell().end_cell())
        .end_cell()
    )
     .end_cell();
    send_raw_message(msg, 0);
}

;;; Loads a signed [len]-bit integer from a slice [s].
;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) "LDIX";

;;; Returns the number of references in `slice` [s].
int slice_refs(slice s) asm "SREFS";

int op::report_static_data() asm "0x8b771735 PUSHINT";

#include "imports/stdlib.fc";

;;; Checks whether a dictionary is empty. Equivalent to cell_null?.

int rand(int range) impure asm "RAND";

(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) "DICTIGETNEXT" "NULLSWAPIFNOT2";


;; Deploy a single NFT
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code); ;; owner addres is in the nft_item_code
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

const msg::send_mode::carry_remaining_value = 64;


{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.1";
}


() send_grams(slice address, int amount) impure {
  cell msg = begin_cell()
    .store_uint (0x18, 6) ;; bounce
    .store_slice(address) ;; 267 bit address
    .store_grams(amount)
    .store_uint(0, 107) ;; 106 zeroes +  0 as an indicator that there is no cell with the data
    .end_cell();
  send_raw_message(msg, 3); ;; mode, 2 for ignoring errors, 1 for sender pays fees, 64 for returning inbound message value
}


const op::withdraw = 3;


(int, int, slice, slice, int, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address, lending_protocol_address) = (
        ds~load_uint(64),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, lending_protocol_address, ds~load_uint(64), ds~load_msg_addr(), ds~load_ref() );
    } else {
        return (0, index, collection_address, lending_protocol_address, 0, null(), null()); ;; nft not initialized yet
    }
}

(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";

cell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

{-
  # Slice primitives

  It is said that a primitive _loads_ some data,
  if it returns the data and the remainder of the slice
  (so it can also be used as [modifying method](https://ton.org/docs/#/func/statements?id=modifying-methods)).

  It is said that a primitive _preloads_ some data, if it returns only the data
  (it can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods)).

  Unless otherwise stated, loading and preloading primitives read the data from a prefix of the slice.
-}


;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt lending_protocol_address
;;  uint64 activate_time
;;  MsgAddressInt owner_address
;;  cell content
;;

(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";


int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}

#include "treasury_utils.fc";


cell config() method_id {
    return get_data();
}

;;
;;  TON NFT Item Smart Contract
;;

int op::edit_content() asm "0x1a0b9d51 PUSHINT";

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}

int __test_better_multiplication_128_mod_16() {
  return invoke_gas(mul_mod_better, [(1 << 125) + (1 << 127), (1 << 126) + (1 << 125), 65535]);
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(ctx_owner)
            .store_uint(ctx_id, 32)
            .store_uint(ctx_result, 32)
            .store_slice(ctx_tracker_contract_addr)
            .end_cell()
    );
}


;;; Loads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.
;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) "LDSLICEX";


;; Recreation functions

const op::register = 0x4dcbb5a8;


;; Get methods

cell new_dict() asm "NEWDICT";

;;; Computes the maximum of two integers [x] and [y].
int max(int x, int y) asm "MAX";

(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) "PFXDICTDEL";


() glory_to_winner(slice winner_address) impure;

#include "imports/nft_op_codes.fc";

;; ~load_op returns opcode stored in cell slice.
(slice, int) ~load_op(slice s) inline { return s.load_uint(32); }



() msg::send_text(
    slice to_addr,
    int value,
    slice content,
    int mode
) impure {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_addr)
        .store_coins(value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(0, 32)
        .store_slice(content)
        .end_cell();

    send_raw_message(msg, mode);
}


;;
;;  GET Methods
;;


(cell, (slice, int)) ~udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDELGET" "NULLSWAPIFNOT";

(cell, int, slice, int) udict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMAX" "NULLSWAPIFNOT2";

const op::check_signature = "op::check_signature"c;


;;; Sorts two integers.
(int, int) minmax(int x, int y) asm "MINMAX";

(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMINREF" "NULLSWAPIFNOT2";

int dict_empty?(cell c) asm "DICTEMPTY";

() force_chain(slice addr) impure {
      (int wc, _) = parse_std_addr(addr);
    throw_unless(333, wc == workchain());
}

(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";


() save_data(slice owner_address, int player_counter, int playing, slice charity_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(player_counter, 64)
    .store_uint(playing, 64)
    .store_slice(charity_address)
    .end_cell()
  );
}

const op::create_pool = 1;


;; Get methods
{-
// this function gets the next item in the collection and returns
// the next item index, the item itself, the owner address, and the lending protocol address
-}
(int, cell, slice, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, lending_protocol_address) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address, lending_protocol_address);
}

;; NFT collection smart contract


;;; Moves a variable [x] to the top of the stack
forall X -> (X, ()) ~impure_touch(X x) impure asm "NOP";



const op::accumulate = "op::accumulate"c;


;;; Returns the third element of a tuple (with unknown element types).
forall X -> X third(tuple t) asm "THIRD";

;;
;;  GET Methods
;;


#include "imports/stdlib.fc";


{-
// This function returns a string containing the version of the contract
// that is stored in the blockchain.
-}
slice get_version() method_id {
    return "v0.1";
}


{-
// This function is called by a treasury contract to calculate the address of a treasury pool.
// nft_item_address - the address of the NFT item whose address is to be calculated.
// returns the address of the treasury pool.
-}
(slice) get_treasury_pool_address(slice nft_item_address) method_id {
    var (index, owner_address, pool_code) = load_data();
    slice pool_address = calculate_treasury_pool_address(my_address(), nft_item_address, pool_code);
    return pool_address; ;; then return the value
}

;;; Loads an unsigned [len]-bit integer from a slice [s].
;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) "LDUX";

(int, slice, cell) load_data() impure {
    var ds = get_data().begin_parse();
    var (index, owner_address, pool_code) = (ds~load_uint(64), ds~load_msg_addr(), ds~load_ref()); ;; treasury_pool_code
    ds.end_parse();
    return (index, owner_address, pool_code);
}

;;; Checks whether the data parts of two slices coinside


{-
// This function takes the index of the NFT and the individual NFT's content, and returns the offchain content for the NFT
// The individual NFT content is stored in the offchain data of the NFT, and the common content is stored in the contract's data.
// The function returns the offchain content, which is a cell containing the offchain tag, the common content, and the individual NFT content.
-}
cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}


;;; Creates a tuple of length four with given arguments as elements.
forall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm "4 TUPLE";

#include "imports/nft_op_codes.fc";


builder store_body_header(builder b, int op, int query_id) inline {
    return b.store_uint(op, 32)
          .store_uint(query_id, 64);
}

(int, int, slice, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
  return (init?, index, collection_address, owner_address, nexton_address, content);
}


;;; A non-quiet version of [slice_compute_data_size?] that throws a cell overflow exception (8) on failure.
(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm "SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";


() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_tracker, 32)
            .end_cell()
    );
}

#include "message.fc";

;;; Checks if [s] is empty. If not, throws an exception.
() end_parse(slice s) impure asm "ENDS";

const msg::send_mode::carry_remaining_balance = 128;

{-
// This code is used to get the pool data, which includes the owner's address
// and the balance of the pool.
-}
(slice, int) get_pool_data() method_id {
    (_, _, _, slice owner_address, int balance) = load_data();
    return (owner_address, balance);
}


() glory_to_winner(slice winner_address) impure {
  var (_, _, _, charity_address) = load_data();
  var [balance, _] = get_balance();
  ;; TODO Calculate fees for renting
  var winner_amount = balance / 100 * 90;
  var charity_amount = balance / 100 * 10;
  send_grams(winner_address, winner_amount);
  send_grams(charity_address, charity_amount);
}


{-
  # Builder primitives
  It is said that a primitive _stores_ a value `x` into a builder `b`
  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.
  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).

  All the primitives below first check whether there is enough space in the `builder`,
  and only then check the range of the value being serialized.
-}


int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}

(cell, slice, slice, int) dict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTREMMIN" "NULLSWAPIFNOT2";

;;; Creates a new empty `builder`.
builder begin_cell() asm "NEWC";

;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";

;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";


{-
// This function calculates the address of the treasury pool.
// The function returns the treasury pool address.
// The function takes the owner address, nft item address, and treasury pool code as parameters.
-}
slice calculate_treasury_pool_address(slice owner_address, slice nft_item_address, cell treasury_pool_code) inline {
    return calculate_treasury_pool_address_by_state(calculate_treasury_pool_state_init(owner_address, nft_item_address, treasury_pool_code));
}


;;; Returns the first element of a tuple (with unknown element types).
forall X -> X first(tuple t) asm "FIRST";

(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMIN" "NULLSWAPIFNOT2";

#include "imports/stdlib.fc";

int op::transfer() asm "0xf8a7ea5 PUSHINT";

;; ~load_op returns opcode stored in cell slice.
(slice, int) ~load_op(slice s) inline { return s.load_uint(32); }


() msg::send_result(
    slice to_addr,
    int result,
    int opcode,
    int mode
) impure {
    ;; if we want to send a message, we first need to construct it
    ;; message serialization in most cases may be reduced to
    var msg = begin_cell()
                .store_uint(0x10, 6)                    ;; tech flags
                .store_slice(to_addr)                   ;; address to send message to
                .store_coins(0)                         ;; value of coins to send
                .store_uint(0, 107)                     ;; more tech flags :)
                .store_uint(opcode, 32)                 ;; call accumulate action in tracker
                .store_uint(0, 64)                      ;; query id 0
                .store_int(result, 32)                  ;; result to send
            .end_cell();

    ;; to send messages, use send_raw_message from the standard library.
    ;; it accepts two arguments message and mode
    send_raw_message(msg, mode);
}


() save_data(cell contributors, slice owner, int percentage_payoff, int deadline, int total_pledge) impure inline{
    set_data(begin_cell()
            .store_ref(contributors)
            .store_slice(owner)
            .store_uint(percentage_payoff)
            .store_uint(deadline)
            .store_uint(total_pledge)
            .end_cell())
}

;;; Updates the current value of `c3`. Usually, it is used for updating smart contract code in run-time.
;;; Note that after execution of this primitive the current code
;;; (and the stack of recursive function calls) won't change,
;;; but any other function call will use a function from the new code.
() set_c3(cont c) impure asm "c3 POP";


;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.
;; builder store_int(builder b, int x, int len) asm(x b len) "STIX";

(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) "DICTUREMMIN" "NULLSWAPIFNOT2";
