//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/Notes.framework/Notes
// UUID: 8442476B-290B-3BDB-B243-6F4B4833050C
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 720.0.0.0.0
//            Minimum iOS version: 8.0.0
//                    SDK version: 8.0.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface AccountUtilities : NSObject
{
    NSArray *_accountIDsEnabledForNotes;
    NoteContext *_noteContext;
    ACAccountStore *_accountStore;
    NSObject<OS_dispatch_group> *_backgroundDispatchGroup;
    NSLock *_updateAccountInfosLock;
}

+ (id)sharedAccountUtilities;
@property(retain) NSLock *updateAccountInfosLock; // @synthesize updateAccountInfosLock=_updateAccountInfosLock;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *backgroundDispatchGroup; // @synthesize backgroundDispatchGroup=_backgroundDispatchGroup;
@property(retain, nonatomic) ACAccountStore *accountStore; // @synthesize accountStore=_accountStore;
- (void).cxx_destruct;
- (void)updateAccountInfos;
- (id)localAccountDisplayName;
- (_Bool)localNotesExist;
- (id)defaultStoreSyncIdWithDesiredSyncId:(id)arg1;
- (id)accountIDsEnabledForNotes;
- (id)accountsEnabledForNotes;
- (id)freshContext;
- (void)startKeepingAccountInfosUpToDate;
- (void)dealloc;
- (id)init;
- (void)_accountStoreDidChange:(id)arg1;

@end

@interface ExternalSequenceNumberToAttachmentNoteBodyToAttachmentMigrationPolicy : NSEntityMigrationPolicy
{
}

- (_Bool)endEntityMapping:(id)arg1 manager:(id)arg2 error:(id *)arg3;
- (_Bool)createRelationshipsForDestinationInstance:(id)arg1 entityMapping:(id)arg2 manager:(id)arg3 error:(id *)arg4;
- (_Bool)createDestinationInstancesForSourceInstance:(id)arg1 entityMapping:(id)arg2 manager:(id)arg3 error:(id *)arg4;
- (id)unarchiveObjectWithExternalRepresentation:(id)arg1;

@end

@interface MFMessageFileWrapper (ArchivingSupport)
+ (id)supportedArchivedClassNames;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
@end

@interface MNFNoteProperty : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *propertyKey; // @dynamic propertyKey;
@property(retain, nonatomic) id propertyValue; // @dynamic propertyValue;
@end

@interface NSDate (NoteObjectAdditions)
+ (id)modificationDateForNoteBeingEdited;
@end

@interface NoteCollectionObject : NSManagedObject
{
}

- (id)basicAccountIdentifier;
- (id)collectionInfo;
- (id)predicateForNotes;

@end

@interface NoteAccountObject : NoteCollectionObject
{
    NSDictionary *_constraints;
}

@property(retain, nonatomic) NSDictionary *constraints; // @synthesize constraints=_constraints;
- (void).cxx_destruct;
- (void)didTurnIntoFault;
- (_Bool)validateDefaultStore:(id *)arg1 error:(id *)arg2;
- (_Bool)shouldMarkNotesAsDeleted;
@property(retain, nonatomic) NSString *pathToConstraintsPlist;
@property(nonatomic) int accountType;
- (id)storeForExternalId:(id)arg1;
- (id)basicAccountIdentifier;
- (id)collectionInfo;
- (id)predicateForNotes;

// Remaining properties
@property(retain, nonatomic) NSString *accountIdentifier; // @dynamic accountIdentifier;
@property(retain, nonatomic) NSString *constraintsPath; // @dynamic constraintsPath;
@property(retain, nonatomic) NoteStoreObject *defaultStore; // @dynamic defaultStore;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSSet *stores; // @dynamic stores;
@property(retain, nonatomic) NSNumber *type; // @dynamic type;

@end

@interface NoteAttachmentObject : NSManagedObject
{
}

+ (_Bool)applyFileAttributesForAttachment:(id)arg1 error:(id *)arg2;
+ (_Bool)migrateFileForAttachment:(id)arg1 toCurrentAttachmentPathWithError:(id *)arg2;
+ (_Bool)migrateAttachmentRelatedFilesInContext:(id)arg1 error:(id *)arg2;
- (void)prepareForDeletion;
- (id)attachmentDataWithError:(id *)arg1;
- (id)attachmentDataFileURLWithError:(id *)arg1;
- (_Bool)persistAttachmentData:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(retain, nonatomic) NSString *contentID; // @dynamic contentID;
@property(retain, nonatomic) NSString *filename; // @dynamic filename;
@property(retain, nonatomic) NSString *mimeType; // @dynamic mimeType;
@property(retain, nonatomic) NoteObject *note; // @dynamic note;

@end

@interface NoteBodyObject : NSManagedObject
{
}

- (id)contentAsPlainTextPreservingNewlines;
@property(readonly, nonatomic) NSString *contentAsPlainText;

// Remaining properties
@property(retain, nonatomic) NSString *content; // @dynamic content;
@property(retain, nonatomic) NSString *externalContentRef; // @dynamic externalContentRef;
@property(retain, nonatomic) NSData *externalRepresentation; // @dynamic externalRepresentation;
@property(retain, nonatomic) NoteObject *owner; // @dynamic owner;

@end

@interface NoteChangeObject : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSNumber *changeType; // @dynamic changeType;
@property(retain, nonatomic) NSMutableSet *noteIntegerIds; // @dynamic noteIntegerIds;
@property(retain, nonatomic) NSMutableSet *noteServerIds; // @dynamic noteServerIds;
@property(retain, nonatomic) NSMutableSet *noteServerIntIds; // @dynamic noteServerIntIds;
@property(retain, nonatomic) NoteStoreObject *store; // @dynamic store;
@end

@interface NoteContext : NSObject
{
    NSManagedObjectModel *_managedObjectModel;
    NSManagedObjectContext *_managedObjectContext;
    NSPersistentStoreCoordinator *_persistentStoreCoordinator;
    NSPredicate *_searchPredicate;
    NoteStoreObject *_localStore;
    NoteAccountObject *_localAccount;
    struct __CXIndex *__SharedNoteStoreSearchIndex;
    CPExclusiveLock *__SharedNoteStoreSearchIndexLock;
    int __SharedNoteStoreSearchIndexCount;
    _Bool _isIndexing;
    AccountUtilities *_accountUtilities;
    NSManagedObjectContext *_nextIdContext;
    CPExclusiveLock *_nextIdLock;
    NSNumber *_nextId;
    CPExclusiveLock *_objectCreationLock;
    unsigned long long _notificationCount;
    _Bool _logChanges;
    _Bool _indexInBatches;
    _Bool _hasPriorityInSaveConflicts;
    _Bool _inMigrator;
    NSMutableDictionary *_notePropertyObjectsRealized;
}

+ (id)generateGUID;
+ (id)defaultNotesSortDescriptors;
+ (id)fileProtectionOption;
+ (void)clearTestsNotesRootPath;
+ (void)setTestsNotesRootPath:(id)arg1;
+ (_Bool)databaseIsCorrupt:(id)arg1;
+ (_Bool)shouldLogIndexing;
@property(retain, nonatomic) AccountUtilities *accountUtilities; // @synthesize accountUtilities=_accountUtilities;
@property(readonly, nonatomic) _Bool isIndexing; // @synthesize isIndexing=_isIndexing;
- (void).cxx_destruct;
- (_Bool)deleteIndexFile;
- (long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;
- (void)cleanUpLocks;
- (id)findNotesWithText:(id)arg1 betweenDate:(id)arg2 andDate:(id)arg3;
- (id)copyNotesForSearch:(void *)arg1 predicate:(id)arg2 complete:(char *)arg3;
- (id)copyNotesForSearch:(void *)arg1 complete:(char *)arg2;
- (void *)newSearchContextWithText:(id)arg1;
- (void)trackChanges:(id)arg1;
- (void)managedObjectContextWillSaveNotification:(id)arg1;
- (id)noteChangeWithType:(int)arg1 store:(id)arg2;
- (void)updateSearchIndex:(id)arg1;
- (void)resetNotificationCount;
- (void)receiveDarwinNotificationWithChangeLogging:(_Bool)arg1;
- (_Bool)shouldObserveDarwinNotifications;
- (void)indexInBatches:(_Bool)arg1;
- (void)resumeIndexing;
- (void)wrapUpIndexing;
- (void)destroySearchIndex;
- (struct __CXIndex *)searchIndex:(char *)arg1;
- (void)indexNotes:(id)arg1;
- (id)notesToResumeIndexing;
- (_Bool)shouldResumeIndexing;
- (void)saveNotesToResumeIndexing:(id)arg1;
- (id)persistentStoreCoordinator;
- (id)managedObjectModel;
@property(readonly, retain, nonatomic) NSManagedObjectContext *managedObjectContext;
- (void)setHasPriorityInSaveConflicts:(_Bool)arg1;
- (id)urlForPersistentStore;
- (id)pathForIndex;
- (id)pathForPersistentStore;
- (id)nextIndex;
- (id)getNextIdObject;
- (void)handleMigration;
- (id)propertyValueForKey:(id)arg1;
- (void)setPropertyValue:(id)arg1 forKey:(id)arg2;
- (id)_notePropertyObjectForKey:(id)arg1;
- (_Bool)hasMultipleEnabledStores;
- (_Bool)shouldDisableLocalStore;
- (_Bool)deleteStore:(id)arg1;
- (_Bool)deleteAccount:(id)arg1;
- (_Bool)forceDeleteAccount:(id)arg1;
- (id)localAccount;
- (id)localStore;
- (id)defaultStoreForNewNote;
- (id)accountForAccountId:(id)arg1;
- (id)newlyAddedAccount;
- (id)allAccountsAsFaults:(_Bool)arg1 prefechedRelationshipKeyPaths:(id)arg2;
- (id)allAccounts;
- (unsigned long long)countOfStores;
- (id)faultedInStoresForAccounts:(id)arg1;
- (id)allStores;
- (id)newlyAddedStore;
- (id)collectionForInfo:(id)arg1;
- (id)allNotesWithoutBodiesInCollection:(id)arg1;
- (id)notesForIntegerIds:(id)arg1;
- (id)noteForObjectID:(id)arg1;
- (unsigned long long)countOfNotesMatchingPredicate:(id)arg1;
- (id)allNotesMatchingPredicate:(id)arg1;
- (unsigned long long)countOfNotesInCollection:(id)arg1;
- (id)allNotesInCollection:(id)arg1;
- (unsigned long long)countOfNotes;
- (id)allNotes;
- (id)mostRecentlyModifiedNoteInCollection:(id)arg1;
- (id)visibleNotesForIntegerIds:(id)arg1;
- (id)visibleNoteForObjectID:(id)arg1;
- (unsigned long long)countOfVisibleNotesMatchingPredicate:(id)arg1;
- (id)allVisibleNotesMatchingPredicate:(id)arg1 sorted:(_Bool)arg2;
- (id)allVisibleNotesMatchingPredicate:(id)arg1;
- (unsigned long long)countOfVisibleNotesInCollection:(id)arg1;
- (id)allVisibleNotesInCollection:(id)arg1 sorted:(_Bool)arg2;
- (id)allVisibleNotesInCollection:(id)arg1;
- (unsigned long long)countOfVisibleNotes;
- (id)allVisibleNotes;
- (_Bool)saveSilently:(id *)arg1;
- (_Bool)save:(id *)arg1;
- (_Bool)saveOutsideApp:(id *)arg1;
- (void)invalidate;
- (void)enableChangeLogging:(_Bool)arg1;
- (void)deleteChanges:(id)arg1;
- (void)deleteNoteRegardlessOfConstraints:(id)arg1;
- (void)deleteNote:(id)arg1;
- (id)storeForObjectID:(id)arg1;
- (id)collectionForObjectID:(id)arg1;
- (id)newlyAddedAttachment;
- (id)newlyAddedNoteWithGUID:(id)arg1;
- (id)newlyAddedNote;
- (void)batchFaultNotes:(id)arg1;
- (void)sortNotes:(id)arg1;
- (void)clearCaches;
- (id)newFetchRequestForNotes;
- (id)newFRCForCollection:(id)arg1 delegate:(id)arg2;
- (id)liveNotesNeedingBodiesPredicate;
- (id)visibleNotesPredicate;
- (void)dealloc;
- (id)initWithAccountUtilities:(id)arg1 inMigrator:(_Bool)arg2;
- (id)initWithAccountUtilities:(id)arg1;
- (id)initForMigrator;
- (id)init;
- (void)tearDownCoreDataStack;
- (_Bool)setUpCoreDataStack;
- (void)removeConflictingSqliteAndIdxFiles;
- (void)removeSqliteAndIdxFiles;
- (void)setUpUniqueObjects;
- (void)forceSetUpUniqueObjects;
- (_Bool)setUpLastIndexTid;
- (_Bool)setUpLocalAccountAndStore;
- (void)_createLocalAccount:(id *)arg1 andStore:(id *)arg2;
- (id)storeOptions;

@end

@interface NoteObject : NSManagedObject
{
}

- (_Bool)belongsToCollection:(id)arg1;
@property(nonatomic) unsigned long long sequenceNumber;
- (_Bool)containsAttachments;
@property(retain, nonatomic) NSString *externalContentRef;
@property(retain, nonatomic) NSData *externalRepresentation;
@property(readonly, nonatomic) _Bool hasValidServerIntId;
@property(nonatomic) long long serverIntId;
@property(nonatomic) unsigned long long flags;
@property(readonly, nonatomic) NSURL *noteId;
@property(readonly, nonatomic) _Bool isBeingMarkedForDeletion;
@property(readonly, nonatomic) _Bool isMarkedForDeletion;
- (void)markForDeletion;
@property(nonatomic) _Bool isPlainText;
- (id)contentAsPlainTextPreservingNewlines;
@property(readonly, nonatomic) NSString *contentAsPlainText;
@property(retain, nonatomic) NSString *content;

// Remaining properties
@property(retain, nonatomic) NSSet *attachments; // @dynamic attachments;
@property(retain, nonatomic) NSString *author; // @dynamic author;
@property(retain, nonatomic) NoteBodyObject *body; // @dynamic body;
@property(retain, nonatomic) NSNumber *containsCJK; // @dynamic containsCJK;
@property(retain, nonatomic) NSNumber *contentType; // @dynamic contentType;
@property(retain, nonatomic) NSDate *creationDate; // @dynamic creationDate;
@property(retain, nonatomic) NSNumber *deletedFlag; // @dynamic deletedFlag;
@property(retain, nonatomic) NSNumber *externalFlags; // @dynamic externalFlags;
@property(retain, nonatomic) NSNumber *externalSequenceNumber; // @dynamic externalSequenceNumber;
@property(retain, nonatomic) NSNumber *externalServerIntId; // @dynamic externalServerIntId;
@property(readonly, retain, nonatomic) NSString *guid; // @dynamic guid;
@property(retain, nonatomic) NSNumber *integerId; // @dynamic integerId;
@property(retain, nonatomic) NSNumber *isBookkeepingEntry; // @dynamic isBookkeepingEntry;
@property(retain, nonatomic) NSDate *modificationDate; // @dynamic modificationDate;
@property(retain, nonatomic) NSString *serverId; // @dynamic serverId;
@property(retain, nonatomic) NoteStoreObject *store; // @dynamic store;
@property(retain, nonatomic) NSString *summary; // @dynamic summary;
@property(retain, nonatomic) NSString *title; // @dynamic title;

@end

@interface NoteResurrectionMergePolicy : NSMergePolicy
{
}

+ (id)sharedNoteResurrectionMergePolicy;
- (_Bool)resolveConflicts:(id)arg1 error:(id *)arg2;
- (id)snapshotFromRecord:(id)arg1;
- (_Bool)accountExists:(id)arg1;
- (id)localStoreForNote:(id)arg1;

@end

@interface NoteSearchContext : NSObject
{
    struct __CXQuery *query;
    NSMutableArray *integerIds;
    NoteContext *noteContext;
}

@property(readonly, nonatomic) struct __CXQuery *query; // @synthesize query;
- (void).cxx_destruct;
- (_Bool)nextSearchResults:(id *)arg1 includePrevious:(_Bool)arg2;
- (void)dealloc;
- (id)initWithSearchTerms:(id)arg1 context:(id)arg2;

@end

@interface NoteStoreObject : NoteCollectionObject
{
}

- (id)basicAccountIdentifier;
- (id)collectionInfo;
- (id)predicateForNotes;
- (unsigned long long)minimumSequenceNumberForServerIntIds:(id)arg1;
- (unsigned int)maximumServerIntId;
- (id)notesForServerIntIdsInRange:(struct _NSRange)arg1;
- (id)notesForServerIntIds:(id)arg1;
- (id)notesForServerIntIdsInRange:(struct _NSRange)arg1 ascending:(_Bool)arg2 limit:(unsigned long long)arg3;
- (id)notesForServerIntIds:(id)arg1 ascending:(_Bool)arg2 limit:(unsigned long long)arg3;
- (id)notesForGUIDs:(id)arg1;
- (id)notesForIntegerIds:(id)arg1;
- (id)notesForServerIds:(id)arg1;

// Remaining properties
@property(retain, nonatomic) NoteAccountObject *account; // @dynamic account;
@property(retain, nonatomic) NSSet *changes; // @dynamic changes;
@property(retain, nonatomic) NSString *externalIdentifier; // @dynamic externalIdentifier;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSString *syncAnchor; // @dynamic syncAnchor;

@end

@interface NotesDataCollector : NSObject
{
    _Bool _automaticCollectionOn;
    NotesDataCollectorLogger *_logger;
    ACAccountStore *_accountStore;
    NSDictionary *_accountTypesPerIdentifierCache;
    NSObject<OS_dispatch_group> *_logDispatchGroup;
}

+ (void)clearSharedCollector;
+ (id)sharedCollector;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *logDispatchGroup; // @synthesize logDispatchGroup=_logDispatchGroup;
@property(copy) NSDictionary *accountTypesPerIdentifierCache; // @synthesize accountTypesPerIdentifierCache=_accountTypesPerIdentifierCache;
@property(retain, nonatomic) ACAccountStore *accountStore; // @synthesize accountStore=_accountStore;
@property(nonatomic, getter=isAutomaticCollectionOn) _Bool automaticCollectionOn; // @synthesize automaticCollectionOn=_automaticCollectionOn;
@property(retain, nonatomic) NotesDataCollectorLogger *logger; // @synthesize logger=_logger;
- (void).cxx_destruct;
- (void)logNoteActivityType:(id)arg1;
- (void)logNoteDeltaCount:(long long)arg1 forStoreType:(id)arg2;
- (void)logNoteCountPerStore;
- (void)logStoreDeltaCount:(long long)arg1 forType:(id)arg2;
- (void)logStoreCount;
- (void)logNoteCreationDeltaCountWithAppIdentifier:(long long)arg1;
- (void)logNoteDeltaCount:(long long)arg1;
- (void)logTotalNoteCount;
- (void)logChanges:(id)arg1;
- (void)logDeltaCountForChangedStoresInContext:(id)arg1;
- (void)logDeltaCountForChangedNotesInContext:(id)arg1;
- (void)browseAddedAndDeletedObjectsWithEntity:(id)arg1 inManagedObjectContext:(id)arg2 objectHandler:(CDUnknownBlockType)arg3;
- (void)noteContextWillSaveNotification:(id)arg1;
- (id)freshContext;
- (id)classifyStoresByType:(id)arg1;
- (id)existingStoreForNote:(id)arg1;
- (id)existingAccountForStore:(id)arg1;
- (id)storeTypeForAccountType:(int)arg1 accountIdentifier:(id)arg2;
- (_Bool)isAppleAccountIdentifier:(id)arg1;
- (void)performInitialCollectionIfNeeded;
- (void)stopAutomaticCollection;
- (void)startAutomaticCollection;
- (void)dealloc;
- (id)init;

@end

@interface NotesDataCollectorChange : NSObject
{
    int _accountType;
    NSString *_accountIdentifier;
    long long _operation;
    long long _entity;
}

+ (id)changeForEntity:(long long)arg1 operation:(long long)arg2 account:(id)arg3;
@property(nonatomic) long long entity; // @synthesize entity=_entity;
@property(nonatomic) long long operation; // @synthesize operation=_operation;
@property(nonatomic) int accountType; // @synthesize accountType=_accountType;
@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
- (void).cxx_destruct;

@end

@interface NotesDataCollectorLogger : NSObject
{
}

- (void)setValue:(long long)arg1 forScalarKey:(id)arg2;
- (void)addValue:(long long)arg1 forScalarKey:(id)arg2;

@end

@interface NotesMigrationManager : NSObject
{
}

- (_Bool)migrateNotesStoreAtURL:(id)arg1 storeType:(id)arg2 options:(id)arg3 sourceModel:(id)arg4 destinationModel:(id)arg5 mappingModel:(id)arg6 error:(id *)arg7;
- (_Bool)migrateNotesStoreAtURL:(id)arg1 storeType:(id)arg2 managedObjectModel:(id)arg3 options:(id)arg4 error:(id *)arg5;
- (_Bool)areStoreMetadata:(id)arg1 matchingEntityVersionsInModel:(id)arg2;

@end

@interface NotesMigrationMapping : NSObject
{
    NSManagedObjectModel *_destinationModel;
    NSArray *_sourceModels;
    NSString *_descriptionString;
    long long _type;
}

+ (id)customMappingFromSourceModelName:(id)arg1 toDestinationModelName:(id)arg2;
+ (id)inferredMappingFromSourceModelNames:(id)arg1 toDestinationModelName:(id)arg2;
+ (id)mappings;
+ (id)modelForModelName:(id)arg1;
+ (id)descriptionStringFromSourceStoreNames:(id)arg1 destinationStoreName:(id)arg2;
@property long long type; // @synthesize type=_type;
@property(copy) NSString *descriptionString; // @synthesize descriptionString=_descriptionString;
@property(copy) NSArray *sourceModels; // @synthesize sourceModels=_sourceModels;
@property(retain) NSManagedObjectModel *destinationModel; // @synthesize destinationModel=_destinationModel;
- (void).cxx_destruct;
- (id)description;
- (_Bool)canMigrateStoreMetadata:(id)arg1;
- (id)mappingModelForStoreMetadata:(id)arg1;
- (id)sourceModelForStoreMetadata:(id)arg1;

@end

