(* Wolfram Language Package *)

BeginPackage["FunctionRepo`checkboxLegended`", {"FunctionRepo`", "GeneralUtilities`"}]
(* Exported symbols added here with SymbolName::usage *)
SetUsage[checkboxLegended, "checkboxLegended[func$[<|lbl$1 -> item$1, lbl$2 -> item$2, ...|>, ...]] returns the plot generated by func$ with plot legends that include checkboxes for showing and hiding individual plotted items.."];


Begin["`Private`"] (* Begin Private Context *)

Attributes[checkboxLegended] = {HoldFirst}
 
checkboxLegended[(supportedGraphType_)[data_, rest___], opts : OptionsPattern[]] := With[{
	dat = data
}, 
	DynamicModule[{
		opacity = AssociationThread[Keys[dat], True]
	}, 
		checkboxLegended[supportedGraphType[dat, rest], Dynamic[opacity], opts]
	] /; AssociationQ[dat]
];
 
checkboxLegended[(supportedGraphType_)[data_, rest___], Dynamic[opacity_], opts : OptionsPattern[]] := With[{
	plotData = data, 
	layoutFun = Replace[OptionValue["LegendLayoutFunction"], 
		Automatic :> (Row[{##1}, " "] & )
	]
}, 
	With[{
		keys = Keys[plotData]
	}, 
		If[ !AssociationQ[opacity], opacity = Association[]]; 
		opacity = Join[
			AssociationThread[keys, True], 
			DeleteCases[opacity, Except[True | False]]
		]; 
		supportedGraphType[
			Evaluate @ KeyValueMap[
				Legended[
					Flatten[
						Style[#2, 
							Opacity[
								Dynamic[
									Boole[TrueQ[Lookup[opacity, #1, True]]], 
									TrackedSymbols :> {opacity}
								]
							]
						],
						Infinity,
						Style
					], 
					layoutFun[Checkbox[Dynamic[opacity[#1]]], #1]
				]& , 
				plotData
			], 
			rest
		] /. {legend : _SwatchLegend | _PointLegend | _LineLegend :> Column[{
			Button[
				PaneSelector[
					{True -> "Select none", False -> "Select all"}, 
					Dynamic[TrueQ[And @@ opacity], TrackedSymbols :> {opacity}],
					Alignment -> Center
				], 
				opacity = AssociationThread[keys,  ! TrueQ[And @@ opacity]], 
				ImageSize -> All
			],
			legend
		}, Alignment -> Left]}
	] /; AssociationQ[plotData]
];

Options[checkboxLegended] = {"LegendLayoutFunction" -> Automatic}

End[] (* End Private Context *)

EndPackage[]