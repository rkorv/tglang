apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'

repositories {
    mavenCentral()
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '2.32.0'

dependencies {
    compile project(':repository')
    providedCompile 'javax.servlet:servlet-api:2.5'
    runtime 'javax.servlet:jstl:1.1.2'
    runtime 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.0.6'
    testCompile 'junit:junit:4.11'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

ext {
    functionalJettyStopPort = 8081
    functionalJettyStopKey = 'stopKey'
}

task functionalJettyRun(type: org.gradle.api.plugins.jetty.JettyRun) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
    contextPath = 'todo'
    daemon = true
}

task functionalJettyStop(type: org.gradle.api.plugins.jetty.JettyStop) {
    stopPort = functionalJettyStopPort
    stopKey = functionalJettyStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/functional")
    reports.junitXml.destination = file("$reports.junitXml.destination/functional")
    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
    dependsOn functionalJettyRun
    finalizedBy functionalJettyStop
}

check.dependsOn functionalTest

idea {
    module {
        sourceSets.functionalTest.allSource.srcDirs.each {
            testSourceDirs += it
        }

        scopes.TEST.plus += configurations.functTestCompile
        scopes.TEST.plus += configurations.functTestRuntime
    }
}