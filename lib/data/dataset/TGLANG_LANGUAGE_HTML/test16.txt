<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.10"/>
<title>Digital IO: Software I2C</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Digital IO
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.10 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Software I2C</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_fast_i2c_master.html">FastI2cMaster&lt; sclPin, sdaPin &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">AVR Fast software I2C master class.  <a href="class_fast_i2c_master.html#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i2c_master_base.html">I2cMasterBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for <a class="el" href="class_fast_i2c_master.html" title="AVR Fast software I2C master class. ">FastI2cMaster</a>, <a class="el" href="class_soft_i2c_master.html" title="AVR Software I2C master class. ">SoftI2cMaster</a>.  <a href="class_i2c_master_base.html#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_soft_i2c_master.html">SoftI2cMaster</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">AVR Software I2C master class.  <a href="class_soft_i2c_master.html#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga7204e8a90254de24c0a0548b36ffe9a3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga7204e8a90254de24c0a0548b36ffe9a3">SoftI2cMaster::SoftI2cMaster</a> (uint8_t sclPin, uint8_t sdaPin)</td></tr>
<tr class="separator:ga7204e8a90254de24c0a0548b36ffe9a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaae933eff7266316dd7bfcf00ec35dc2a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gaae933eff7266316dd7bfcf00ec35dc2a">SoftI2cMaster::begin</a> (uint8_t sclPin, uint8_t sdaPin)</td></tr>
<tr class="separator:gaae933eff7266316dd7bfcf00ec35dc2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga56993378a66a702113eef640d8c82ea9"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga56993378a66a702113eef640d8c82ea9">SoftI2cMaster::read</a> (uint8_t last)</td></tr>
<tr class="separator:ga56993378a66a702113eef640d8c82ea9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8ee650a6348bd7472c6ac6fb5c5265f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga8ee650a6348bd7472c6ac6fb5c5265f5">SoftI2cMaster::start</a> ()</td></tr>
<tr class="separator:ga8ee650a6348bd7472c6ac6fb5c5265f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad8f52e1cbf15894472881afe439afa02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gad8f52e1cbf15894472881afe439afa02">SoftI2cMaster::stop</a> (void)</td></tr>
<tr class="separator:gad8f52e1cbf15894472881afe439afa02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab4ce251351fbcc55682ae97191a7e356"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gab4ce251351fbcc55682ae97191a7e356">I2cMasterBase::transfer</a> (uint8_t addressRW, void *buf, size_t nbyte, uint8_t option=<a class="el" href="group__two_wire.html#gaf482db8c5a315422ea7530b086c09e8d">I2C_STOP</a>)</td></tr>
<tr class="separator:gab4ce251351fbcc55682ae97191a7e356"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga452971cabe06c55b1ba61c5d47b72b0a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">I2cMasterBase::transferContinue</a> (void *buf, size_t nbyte, uint8_t option=<a class="el" href="group__two_wire.html#gaf482db8c5a315422ea7530b086c09e8d">I2C_STOP</a>)</td></tr>
<tr class="separator:ga452971cabe06c55b1ba61c5d47b72b0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabcce5d83ae63dc61c2662be4a934d083"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gabcce5d83ae63dc61c2662be4a934d083">SoftI2cMaster::write</a> (uint8_t b)</td></tr>
<tr class="separator:gabcce5d83ae63dc61c2662be4a934d083"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ga950c0757df97cfc0a1f7fddaf21fd2a0"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga950c0757df97cfc0a1f7fddaf21fd2a0">STATE_REP_START</a> = 1</td></tr>
<tr class="separator:ga950c0757df97cfc0a1f7fddaf21fd2a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa42d42b48050ecdfb2111b669d892bb1"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gaa42d42b48050ecdfb2111b669d892bb1">STATE_RX_ADDR_NACK</a> = 4</td></tr>
<tr class="separator:gaa42d42b48050ecdfb2111b669d892bb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad2cd52a768c24fa4e2ecf788835db429"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gad2cd52a768c24fa4e2ecf788835db429">STATE_RX_DATA</a> = 2</td></tr>
<tr class="separator:gad2cd52a768c24fa4e2ecf788835db429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6303d577c073ad6b8c3350d96223c426"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga6303d577c073ad6b8c3350d96223c426">STATE_STOP</a> = 0</td></tr>
<tr class="separator:ga6303d577c073ad6b8c3350d96223c426"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab17e0ed11b1eacfc8ceb714d9497f1db"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#gab17e0ed11b1eacfc8ceb714d9497f1db">STATE_TX_ADDR_NACK</a> = 5</td></tr>
<tr class="separator:gab17e0ed11b1eacfc8ceb714d9497f1db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7f1b7aae9c4b0db47d08e603ed3dbd22"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga7f1b7aae9c4b0db47d08e603ed3dbd22">STATE_TX_DATA</a> = 3</td></tr>
<tr class="separator:ga7f1b7aae9c4b0db47d08e603ed3dbd22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga58292e5be793935a299a1f9738039f92"><td class="memItemLeft" align="right" valign="top">const uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__soft_i2_c.html#ga58292e5be793935a299a1f9738039f92">STATE_TX_DATA_NACK</a> = 6</td></tr>
<tr class="separator:ga58292e5be793935a299a1f9738039f92"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Software Two Wire Interface library. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga7204e8a90254de24c0a0548b36ffe9a3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SoftI2cMaster::SoftI2cMaster </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>sclPin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>sdaPin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Constructor, initialize SCL/SDA pins and set the bus high.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sdaPin</td><td>The software SDA pin number.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sclPin</td><td>The software SCL pin number. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00115">115</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaae933eff7266316dd7bfcf00ec35dc2a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SoftI2cMaster::begin </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>sclPin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>sdaPin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initialize SCL/SDA pins and set the bus high.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sdaPin</td><td>The software SDA pin number.</td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">sclPin</td><td>The software SCL pin number. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00126">126</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga56993378a66a702113eef640d8c82ea9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t SoftI2cMaster::read </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>last</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Read a byte</p>
<dl class="section note"><dt>Note</dt><dd>This function should only be used by experts. Data should be accessed by calling <a class="el" href="group__soft_i2_c.html#gab4ce251351fbcc55682ae97191a7e356">transfer()</a> and <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>send a NACK to terminate read if last is true else send an ACK to continue the read.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>byte read from I2C bus </dd></dl>

<p>Implements <a class="el" href="class_i2c_master_base.html#ab0642665deb11295592d3e46c8baaefa">I2cMasterBase</a>.</p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00160">160</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga8ee650a6348bd7472c6ac6fb5c5265f5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SoftI2cMaster::start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Issue a start condition</p>
<dl class="section note"><dt>Note</dt><dd>This function should only be used by experts. Data should be accessed by calling <a class="el" href="group__soft_i2_c.html#gab4ce251351fbcc55682ae97191a7e356">transfer()</a> and <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a> </dd></dl>

<p>Implements <a class="el" href="class_i2c_master_base.html#ac2e8be9d2809d31b0e456860ef357345">I2cMasterBase</a>.</p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00186">186</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gad8f52e1cbf15894472881afe439afa02"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SoftI2cMaster::stop </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Issue a stop condition.</p>
<dl class="section note"><dt>Note</dt><dd>This function should only be used by experts. Data should be accessed by calling <a class="el" href="group__soft_i2_c.html#gab4ce251351fbcc55682ae97191a7e356">transfer()</a> and <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a> </dd></dl>

<p>Implements <a class="el" href="class_i2c_master_base.html#a8cbf416c6bbf9135bd5f0331ff1951d2">I2cMasterBase</a>.</p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00198">198</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gab4ce251351fbcc55682ae97191a7e356"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool I2cMasterBase::transfer </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>addrRW</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nbytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>option</em> = <code><a class="el" href="group__two_wire.html#gaf482db8c5a315422ea7530b086c09e8d">I2C_STOP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Start an I2C transfer with possible continuation.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">addrRW</td><td>I2C slave address plus R/W bit. The I2C slave address is in the high seven bits and is ORed with on of the following:<ul>
<li>I2C_READ for a read transfer.</li>
<li>I2C_WRITE for a write transfer.</li>
</ul>
</td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">buf</td><td>Source or destination for transfer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nbytes</td><td>Number of bytes to transfer (may be zero). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option for ending the transfer, one of:<ul>
<li>I2C_STOP end the transfer with an I2C stop condition.</li>
<li>I2C_REP_START end the transfer with an I2C repeated start condition.</li>
<li>I2C_CONTINUE allow additional <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a> calls.</li>
</ul>
</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true for success else false. </dd></dl>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00052">52</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga452971cabe06c55b1ba61c5d47b72b0a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool I2cMasterBase::transferContinue </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>nbytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>option</em> = <code><a class="el" href="group__two_wire.html#gaf482db8c5a315422ea7530b086c09e8d">I2C_STOP</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Continue an I2C transfer.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">buf</td><td>Source or destination for transfer. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">nbytes</td><td>Number of bytes to transfer (may be zero). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">option</td><td>Option for ending the transfer, one of:<ul>
<li>I2C_STOP end the transfer with an I2C stop condition.</li>
<li>I2C_REP_START end the transfer with an I2C repeated start condition.</li>
<li>I2C_CONTINUE allow additional <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a> calls.</li>
</ul>
</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true for success else false. </dd></dl>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00080">80</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gabcce5d83ae63dc61c2662be4a934d083"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SoftI2cMaster::write </td>
          <td>(</td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Write a byte</p>
<dl class="section note"><dt>Note</dt><dd>This function should only be used by experts. Data should be accessed by calling <a class="el" href="group__soft_i2_c.html#gab4ce251351fbcc55682ae97191a7e356">transfer()</a> and <a class="el" href="group__soft_i2_c.html#ga452971cabe06c55b1ba61c5d47b72b0a">transferContinue()</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>byte to write </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true for ACK or false for NACK </dd></dl>

<p>Implements <a class="el" href="class_i2c_master_base.html#aee4d48385a72b48a0a452ecfc2cd7fc0">I2cMasterBase</a>.</p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8cpp_source.html#l00214">214</a> of file <a class="el" href="_soft_i2c_master_8cpp_source.html">SoftI2cMaster.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="ga950c0757df97cfc0a1f7fddaf21fd2a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_REP_START = 1</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Repeated start condition transmitted. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00042">42</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="gaa42d42b48050ecdfb2111b669d892bb1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_RX_ADDR_NACK = 4</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Slave address plus read bit transmitted, NACK received. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00051">51</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="gad2cd52a768c24fa4e2ecf788835db429"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_RX_DATA = 2</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read data transfer active. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00045">45</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga6303d577c073ad6b8c3350d96223c426"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_STOP = 0</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Stop condition transmitted. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00039">39</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="gab17e0ed11b1eacfc8ceb714d9497f1db"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_TX_ADDR_NACK = 5</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Slave address plus write bit transmitted, NACK received. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00054">54</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga7f1b7aae9c4b0db47d08e603ed3dbd22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_TX_DATA = 3</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Write data transfer active. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00048">48</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
<a class="anchor" id="ga58292e5be793935a299a1f9738039f92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const uint8_t STATE_TX_DATA_NACK = 6</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Data byte transmitted, NACK received. </p>

<p>Definition at line <a class="el" href="_soft_i2c_master_8h_source.html#l00056">56</a> of file <a class="el" href="_soft_i2c_master_8h_source.html">SoftI2cMaster.h</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 25 2016 09:57:28 for Digital IO by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.10
</small></address>
</body>
</html>
