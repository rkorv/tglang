// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/yabr.os/
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных; // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;           // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;      // Структура              - параметры обработки
Перем Лог;

Перем ОписанияКластеров;       // Массив(Строка)         - к каталогам или файлам описания (.lst) кластеров 1С

Перем НакопленныеДанные;	   // Массив(Структура)      - результаты обработки данных

#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Ложь;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "ОписанияКластеров",
	                          "Массив",
	                          Истина,
	                          "<стандартный путь к файлу (.lst) описания кластера 1С>",
	                          "Пути к каталогам или файлам (.lst) описания кластеров 1С.");
	    
	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки данных
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	Если ПараметрыОбработки.Свойство("ОписанияКластеров") Тогда
		Если ТипЗнч(ОписанияКластеров) = Тип("Массив") Тогда
			ОписанияКластеров = ПараметрыОбработки.ОписанияКластеров;
		Иначе
			ОписанияКластеров = СтрРазделить(ПараметрыОбработки.ОписанияКластеров, ",");
		КонецЕсли;
	Иначе
		ОписанияКластеров = ПутиКОписаниямКластеровПоУмолчанию();
	КонецЕсли;

	Если НЕ МенеджерОбработкиДанных.ЭтоWindows() Тогда
		Для й = 0 По ОписанияКластеров.ВГраница() Цикл
			ОписанияКластеров[й] = СтрЗаменить(ОписанияКластеров[й], "\", "/");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	ПараметрыОбработки.Вставить(ИмяПараметра, Значение);

	Если ВРег(ИмяПараметра) = ВРег("ОписанияКластеров") Тогда
		ОписанияКластеров = Значение;
		Если НЕ МенеджерОбработкиДанных.ЭтоWindows() Тогда
			Для й = 0 По ОписанияКластеров.ВГраница() Цикл
				ОписанияКластеров[й] = СтрЗаменить(ОписанияКластеров[й], "\", "/");
			КонецЦикла;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		ОписанияКластеров = ВходящиеДанные;
	Иначе
		ОписанияКластеров = СтрРазделить(ВходящиеДанные, ",");
	КонецЕсли;

	Если НЕ МенеджерОбработкиДанных.ЭтоWindows() Тогда
		Для й = 0 По ОписанияКластеров.ВГраница() Цикл
			ОписанияКластеров[й] = СтрЗаменить(ОписанияКластеров[й], "\", "/");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	Если НЕ ТипЗнч(НакопленныеДанные) = Тип("Массив") Тогда
		НакопленныеДанные = Новый Массив();
	КонецЕсли;
	
	НайденныеОписания = Новый Массив();

	Для Каждого ТекОписание Из ОписанияКластеров Цикл
		
		Файл = Новый Файл(ТекОписание);

		Если НЕ Файл.Существует() Тогда
			Лог.Отладка("[%1]: Файл описания кластера ""%2"" не существует.", ТипЗнч(ЭтотОбъект), Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;

		Если Файл.ЭтоКаталог() Тогда
			ОписанияВКаталоге = ПутиКОписаниямКластеровВКаталоге(Файл.ПолноеИмя);

			Для Каждого ТекОписаниеВКаталоге Из ОписанияВКаталоге Цикл
				НайденныеОписания.Добавить(ТекОписаниеВКаталоге);
			КонецЦикла;
		Иначе
			Лог.Отладка("[%1]: Найден файл описания кластера ""%2""", ТипЗнч(ЭтотОбъект), ТекОписание);
			НайденныеОписания.Добавить(ТекОписание);
		КонецЕсли;
	КонецЦикла;

	Для Каждого ТекОписание Из НайденныеОписания Цикл
		Лог.Информация("[%1]: Обработка файла описания кластера ""%2""", ТипЗнч(ЭтотОбъект), ТекОписание);
		НакопленныеДанные.Добавить(ТекОписание);
		ПродолжениеОбработкиДанныхВызовМенеджера(НакопленныеДанные[НакопленныеДанные.ВГраница()]);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Лог.Информация("[%1]: Завершение обработки данных.", ТипЗнч(ЭтотОбъект));

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

// Функция - возвращает путь к последнему полученному файлу описания кластера 1С
//
// Возвращаемое значение:
//	Строка     - путь к последнему полученному файлу описания кластера 1С
//
Функция ФайлОписания() Экспорт

	Возврат НакопленныеДанные[НакопленныеДанные.ВГраница()];

КонецФункции // ФайлОписания()

// Функция - возвращает путь к каталогу описания кластера 1С
//
// Возвращаемое значение:
//	Строка     - путь к каталогу описания кластера 1С
//
Функция КаталогОписания() Экспорт

	Файл = Новый Файл(НакопленныеДанные[НакопленныеДанные.ВГраница()]);

	Возврат Файл.Путь;

КонецФункции // КаталогОписания()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

// Функция - получает стандартные пути к файлам описания кластеров
// 
// Возвращаемое значение:
//     Массив(Строка)      - стандартные (существующие) пути к файлам описания кластера 1С
//
Функция ПутиКОписаниямКластеровПоУмолчанию()

	Путь64 = "C:\Program Files\1cv8\srvinfo";
	Путь86 = "C:\Program Files (x86)\1cv8\srvinfo";

	Файл = Новый Файл(Путь64);

	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда
		Возврат ПутиКОписаниямКластеровВКаталоге(Файл.ПолноеИмя);
	КонецЕсли;

	Файл = Новый Файл(Путь86);

	Если Файл.Существует() И Файл.ЭтоКаталог() Тогда
		Возврат ПутиКОписаниямКластеровВКаталоге(Файл.ПолноеИмя);
	КонецЕсли;

	Возврат Новый Массив();

КонецФункции // ПутиКОписаниямКластеровПоУмолчанию()

// Функция - получает пути к файлам описания кластера 1С в указанном каталоге
// 
// Возвращаемое значение:
//     Массив(Строка)      - пути к файлам описания кластера 1С в указанном каталоге
//
Функция ПутиКОписаниямКластеровВКаталоге(Каталог)

	ПутиКОписаниям = Новый Массив();

	НайденныеФайлы = НайтиФайлы(Каталог, "1CV8Clst.lst", Истина);
	Для Каждого ТекФайл Из НайденныеФайлы Цикл
		ПутиКОписаниям.Добавить(ТекФайл.ПолноеИмя);
	КонецЦикла;

	Возврат ПутиКОписаниям;

КонецФункции // ПутиКОписаниямКластеровВКаталоге()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта(Менеджер)

	УстановитьМенеджерОбработкиДанных(Менеджер);

	Лог = МенеджерОбработкиДанных.Лог();

	ОписанияКластеров = ПутиКОписаниямКластеровПоУмолчанию();

	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
